import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,e as a,o as t}from"./app-D4yN_ylH.js";const n={};function l(h,e){return t(),s("div",null,e[0]||(e[0]=[a(`<p>以下是对 React 16、18 和 19 版本的主要特性和 API 变更的详细总结，现已补充了 <code>useEffectEvent</code> 的相关内容：</p><hr><h2 id="react-16-2017-年" tabindex="-1"><a class="header-anchor" href="#react-16-2017-年"><span>React 16（2017 年）</span></a></h2><h3 id="_1-fiber-架构" tabindex="-1"><a class="header-anchor" href="#_1-fiber-架构"><span>1. Fiber 架构</span></a></h3><p>引入全新的 Fiber 架构，提升了渲染性能，为后续的异步渲染和并发模式奠定了基础。</p><h3 id="_2-错误边界" tabindex="-1"><a class="header-anchor" href="#_2-错误边界"><span>2. 错误边界</span></a></h3><p>新增 <code>componentDidCatch</code> 生命周期方法，使组件能够捕获并处理其子组件中的 JavaScript 错误，增强了应用的稳定性。</p><h3 id="_3-portals-传送门" tabindex="-1"><a class="header-anchor" href="#_3-portals-传送门"><span>3. Portals（传送门）</span></a></h3><p>允许将子节点渲染到 DOM 的不同位置，便于实现模态框等 UI 组件。</p><h3 id="_4-新的生命周期方法" tabindex="-1"><a class="header-anchor" href="#_4-新的生命周期方法"><span>4. 新的生命周期方法</span></a></h3><p>引入了 <code>getDerivedStateFromProps</code> 和 <code>getSnapshotBeforeUpdate</code>，并弃用了 <code>componentWillMount</code>、<code>componentWillReceiveProps</code> 和 <code>componentWillUpdate</code>。</p><hr><h2 id="react-18-2022-年" tabindex="-1"><a class="header-anchor" href="#react-18-2022-年"><span>React 18（2022 年）</span></a></h2><h3 id="_1-并发模式-concurrent-mode" tabindex="-1"><a class="header-anchor" href="#_1-并发模式-concurrent-mode"><span>1. 并发模式（Concurrent Mode）</span></a></h3><p>通过 <code>createRoot</code> API 启用，允许 React 更灵活地中断和恢复渲染任务，提高了响应速度。</p><h3 id="_2-自动批处理-automatic-batching" tabindex="-1"><a class="header-anchor" href="#_2-自动批处理-automatic-batching"><span>2. 自动批处理（Automatic Batching）</span></a></h3><p>扩展了状态更新的批处理范围，包括异步操作中的更新，减少了不必要的重新渲染。</p><h3 id="_3-usetransition-和-starttransition" tabindex="-1"><a class="header-anchor" href="#_3-usetransition-和-starttransition"><span>3. <code>useTransition</code> 和 <code>startTransition</code></span></a></h3><p>提供了更细粒度的更新控制，允许将非紧急更新标记为可中断，提高了界面的响应性。</p><h3 id="_4-usedeferredvalue" tabindex="-1"><a class="header-anchor" href="#_4-usedeferredvalue"><span>4. <code>useDeferredValue</code></span></a></h3><p>用于延迟更新非紧急的值，避免在高频率更新时阻塞用户输入。</p><h3 id="_5-useid" tabindex="-1"><a class="header-anchor" href="#_5-useid"><span>5. <code>useId</code></span></a></h3><p>生成稳定的唯一 ID，解决了服务端和客户端渲染不一致的问题。</p><hr><h2 id="react-19-2024-年" tabindex="-1"><a class="header-anchor" href="#react-19-2024-年"><span>React 19（2024 年）</span></a></h2><h3 id="_1-actions-api" tabindex="-1"><a class="header-anchor" href="#_1-actions-api"><span>1. Actions API</span></a></h3><p>引入了 <code>useActionState</code> 和 <code>useOptimistic</code> 钩子，简化了异步操作和表单处理，支持乐观 UI 更新。</p><h3 id="_2-服务器组件-server-components" tabindex="-1"><a class="header-anchor" href="#_2-服务器组件-server-components"><span>2. 服务器组件（Server Components）</span></a></h3><p>支持在服务器上渲染组件，减少了客户端的负担，提高了性能。</p><h3 id="_3-ref-作为属性" tabindex="-1"><a class="header-anchor" href="#_3-ref-作为属性"><span>3. <code>ref</code> 作为属性</span></a></h3><p>函数组件可以直接接收 <code>ref</code> 属性，无需使用 <code>forwardRef</code>，简化了组件的封装。</p><h3 id="_4-文档元数据支持" tabindex="-1"><a class="header-anchor" href="#_4-文档元数据支持"><span>4. 文档元数据支持</span></a></h3><p>可以在组件中直接使用 <code>&lt;title&gt;</code>、<code>&lt;meta&gt;</code> 等标签，提升了 SEO 和可访问性。</p><h3 id="_5-资源预加载-api" tabindex="-1"><a class="header-anchor" href="#_5-资源预加载-api"><span>5. 资源预加载 API</span></a></h3><p>提供了 <code>preload</code>、<code>preconnect</code>、<code>preinit</code> 等 API，优化了资源的加载顺序和性能。</p><h3 id="_6-自定义元素支持" tabindex="-1"><a class="header-anchor" href="#_6-自定义元素支持"><span>6. 自定义元素支持</span></a></h3><p>全面支持 Web Components，改善了与其他框架和库的集成能力。</p><h3 id="_7-实验性-api-useeffectevent" tabindex="-1"><a class="header-anchor" href="#_7-实验性-api-useeffectevent"><span>7. 实验性 API：<code>useEffectEvent</code></span></a></h3><p><code>useEffectEvent</code> 是 React 实验性版本中引入的一个 Hook，旨在解决副作用函数中闭包导致的状态不一致问题。它允许您在副作用中使用始终引用最新状态和 props 的函数，避免因依赖项变化而频繁重新创建函数。</p><p><strong>使用方法：</strong></p><p>要使用 <code>useEffectEvent</code>，您需要从 React 的实验性版本中导入：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useEffect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">experimental_useEffectEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> useEffectEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p></p><p><strong>示例：</strong></p><p>以下是一个使用 <code>useEffectEvent</code> 的示例：</p><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ChatRoom</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">roomId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">theme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> onConnected</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useEffectEvent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    showNotification</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Connected!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">theme</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  useEffect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> connection</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">serverUrl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">roomId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;connected&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      onConnected</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">disconnect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }, [</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">roomId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p><p>在这个示例中，<code>onConnected</code> 是通过 <code>useEffectEvent</code> 创建的函数，它始终引用最新的 <code>theme</code> 值，即使 <code>theme</code> 发生变化，也无需重新创建 <code>onConnected</code> 函数。</p><p><strong>注意事项：</strong></p><ul><li><p><code>useEffectEvent</code> 是实验性 API，仅在 React 的实验版本中可用。</p></li><li><p>要使用它，您需要安装以下实验性版本的包：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react@experimental</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> react-dom@experimental</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><p></p><ul><li>由于其实验性，建议仅在非生产环境中尝试使用。</li><li>React 官方尚未决定是否将在稳定版本中引入该 API。</li></ul><hr><p>以上是 React 16、18 和 19 版本的主要特性和 API 变更的详细总结，已包含 <code>useEffectEvent</code> 的相关内容。建议在升级到新版本时，仔细阅读官方的升级指南，确保顺利过渡。</p>`,54)]))}const d=i(n,[["render",l]]),c=JSON.parse('{"path":"/posts/react/react%E5%8E%86%E7%A8%8B.html","title":"React发展","lang":"zh-CN","frontmatter":{"title":"React发展","date":"2025-04-11T00:00:00.000Z","tags":["react"],"description":"以下是对 React 16、18 和 19 版本的主要特性和 API 变更的详细总结，现已补充了 useEffectEvent 的相关内容： React 16（2017 年） 1. Fiber 架构 引入全新的 Fiber 架构，提升了渲染性能，为后续的异步渲染和并发模式奠定了基础。 2. 错误边界 新增 componentDidCatch 生命周...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/react/react%E5%8E%86%E7%A8%8B.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"React发展"}],["meta",{"property":"og:description","content":"以下是对 React 16、18 和 19 版本的主要特性和 API 变更的详细总结，现已补充了 useEffectEvent 的相关内容： React 16（2017 年） 1. Fiber 架构 引入全新的 Fiber 架构，提升了渲染性能，为后续的异步渲染和并发模式奠定了基础。 2. 错误边界 新增 componentDidCatch 生命周..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-16T05:45:22.000Z"}],["meta",{"property":"article:tag","content":"react"}],["meta",{"property":"article:published_time","content":"2025-04-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-16T05:45:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"React发展\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-04-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-04-16T05:45:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"React 16（2017 年）","slug":"react-16-2017-年","link":"#react-16-2017-年","children":[{"level":3,"title":"1. Fiber 架构","slug":"_1-fiber-架构","link":"#_1-fiber-架构","children":[]},{"level":3,"title":"2. 错误边界","slug":"_2-错误边界","link":"#_2-错误边界","children":[]},{"level":3,"title":"3. Portals（传送门）","slug":"_3-portals-传送门","link":"#_3-portals-传送门","children":[]},{"level":3,"title":"4. 新的生命周期方法","slug":"_4-新的生命周期方法","link":"#_4-新的生命周期方法","children":[]}]},{"level":2,"title":"React 18（2022 年）","slug":"react-18-2022-年","link":"#react-18-2022-年","children":[{"level":3,"title":"1. 并发模式（Concurrent Mode）","slug":"_1-并发模式-concurrent-mode","link":"#_1-并发模式-concurrent-mode","children":[]},{"level":3,"title":"2. 自动批处理（Automatic Batching）","slug":"_2-自动批处理-automatic-batching","link":"#_2-自动批处理-automatic-batching","children":[]},{"level":3,"title":"3. useTransition 和 startTransition","slug":"_3-usetransition-和-starttransition","link":"#_3-usetransition-和-starttransition","children":[]},{"level":3,"title":"4. useDeferredValue","slug":"_4-usedeferredvalue","link":"#_4-usedeferredvalue","children":[]},{"level":3,"title":"5. useId","slug":"_5-useid","link":"#_5-useid","children":[]}]},{"level":2,"title":"React 19（2024 年）","slug":"react-19-2024-年","link":"#react-19-2024-年","children":[{"level":3,"title":"1. Actions API","slug":"_1-actions-api","link":"#_1-actions-api","children":[]},{"level":3,"title":"2. 服务器组件（Server Components）","slug":"_2-服务器组件-server-components","link":"#_2-服务器组件-server-components","children":[]},{"level":3,"title":"3. ref 作为属性","slug":"_3-ref-作为属性","link":"#_3-ref-作为属性","children":[]},{"level":3,"title":"4. 文档元数据支持","slug":"_4-文档元数据支持","link":"#_4-文档元数据支持","children":[]},{"level":3,"title":"5. 资源预加载 API","slug":"_5-资源预加载-api","link":"#_5-资源预加载-api","children":[]},{"level":3,"title":"6. 自定义元素支持","slug":"_6-自定义元素支持","link":"#_6-自定义元素支持","children":[]},{"level":3,"title":"7. 实验性 API：useEffectEvent","slug":"_7-实验性-api-useeffectevent","link":"#_7-实验性-api-useeffectevent","children":[]}]}],"git":{"createdTime":1744782322000,"updatedTime":1744782322000,"contributors":[{"name":"zy","username":"zy","email":"891374900@qq.com","commits":1,"url":"https://github.com/zy"}]},"readingTime":{"minutes":2.96,"words":887},"filePathRelative":"posts/react/react历程.md","localizedDate":"2025年4月11日","excerpt":"<p>以下是对 React 16、18 和 19 版本的主要特性和 API 变更的详细总结，现已补充了 <code>useEffectEvent</code> 的相关内容：</p>\\n<hr>\\n<h2>React 16（2017 年）</h2>\\n<h3>1. Fiber 架构</h3>\\n<p>引入全新的 Fiber 架构，提升了渲染性能，为后续的异步渲染和并发模式奠定了基础。</p>\\n<h3>2. 错误边界</h3>\\n<p>新增 <code>componentDidCatch</code> 生命周期方法，使组件能够捕获并处理其子组件中的 JavaScript 错误，增强了应用的稳定性。</p>","autoDesc":true}');export{d as comp,c as data};
