import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,e as i,o as a}from"./app-D4yN_ylH.js";const n={};function t(r,e){return a(),o("div",null,e[0]||(e[0]=[i('<p>提出问题:</p><ol><li>服务器数据库异常重启了会造成什么样的影响？</li><li>不小心删除了数据库怎么办，或者不小心删除了数据库表中数据怎么办？</li><li>一条更新语句在数据库系统内部执行时与数据库日志系统有什么联系？</li><li>数据库备份，是每天一备比较好，还是每周一备比较好？<br> 接下来在讲解日志系统的同时，回答上面的几个问题。</li></ol><h1 id="日志系统详解" tabindex="-1"><a class="header-anchor" href="#日志系统详解"><span>日志系统详解</span></a></h1><h2 id="redo日志-重做日志" tabindex="-1"><a class="header-anchor" href="#redo日志-重做日志"><span>redo日志(重做日志)</span></a></h2><p><code>redo</code>是引擎层的日志，而且是InnoDB特有的。InnoDB的<code>redo log</code>是有固定大小的，比如可以配置为 一组4个文件（logfile-1，logfile-2，logfile-3，logfile-4），每个文件的大小是1GB，那么它总共可以记录4GB的操作。一个环状循环结构，从头开始写，写到末尾又回到开始循环写。</p><h3 id="redo中的环状结构" tabindex="-1"><a class="header-anchor" href="#redo中的环状结构"><span>redo中的环状结构</span></a></h3><p>结构图：<br><img src="http://img.xiaogangzai.cn/database_logSystem01.png" alt="" loading="lazy"></p><p><code>write pos</code>是当前记录的位置，一边写一边后移，环状结构，写到3号文件末尾就会回到0号文件开头。checkpoint是当前擦除的位置，也是往后推移并且循环的。注意擦除记录前要把记录更新到数据文件（这里可以联想 粉板 老板正式记账本的例子）</p><h3 id="redo日志作用-回答提出问题1" tabindex="-1"><a class="header-anchor" href="#redo日志作用-回答提出问题1"><span>redo日志作用(<strong>回答提出问题1</strong>)</span></a></h3><ol><li>在MySQL中，如果每一次的更新操作都写进磁盘，然后磁盘也找到对应的那条记录，然后再更新，整个过程io成本，查找成本都很高，为了解决这个问题，提升效率，就会用到redo日志，MySQL经常说的的WAL技术，<code>WAL</code>的全称是<code>write-Ahead-Logging</code>，它的关键点就是<code>先写日志，再写磁盘</code>。具体说，当有一条记录需要更新的时候，InoDB引擎会先记录到redo log，并更新内存，这时候更新就算完成了。同时InnoDb引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</li><li>正是因为有了redo log ,InnoDB就可以保证即使数据库发生异常重启，之前提交的记录多不会消失，这个能力叫<code>crash-safe</code>。只要数据库的物理记录还在redo log中，就是服务器数据库出现问题重启，数据库恢复后，数据记录仍然可以恢复。</li></ol><h2 id="binlog日志-归档日志" tabindex="-1"><a class="header-anchor" href="#binlog日志-归档日志"><span>binlog日志(归档日志)</span></a></h2><p>Mysql基础架构整体分为两部分：Server层和引擎层，引擎层主要负责存储相关的事宜。上面说到在引擎层有自己的日志，而且只在InnoDB引擎中才有。Server层也有自己的日志，称为binlog(归档日志)。它是采用追写入日志的方式。追加写是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</p><h3 id="binlog日志作用-回答提出问题2" tabindex="-1"><a class="header-anchor" href="#binlog日志作用-回答提出问题2"><span>binlog日志作用(<strong>回答提出问题2</strong>)</span></a></h3><p>只依靠redo日志的crash-safe特性在应对数据库误删，表数据误删等操作时候，有些时候redo日志是无力的，但是binlog日志解决这些问题，因为binlog会记录所有的逻辑操作，并且采用“<strong>追加写</strong>”的形式。</p><p>举个例子如果公司员工发现某天下午有一个误删表数据操作，要求找回数据，应该怎么做？（注：这里要考虑是在刚备份之后误删除，还是备份之前误删除，下面的例子是在备份之前删除的，找之前删除的数据）</p><ol><li>首先，找到最近的一次全量备份，这要看你们公司的数据库是多久备份一次（有的公司是一天，有的公司是一周，而且会定期删除，很多公司只保留最近一个月的数据库备份），拿到备份数据后，把这个备份数据恢复到临时表</li><li>然后从备份的时间点开始，将备份的binlog依次取出来，重放到误删表之前的那个时刻</li><li>这时候临时库跟误删之前的线上库一样了，然后把表数据从临时数据取出来，按需恢复到线上库去。</li></ol><h2 id="redo日志与binlog日志对比" tabindex="-1"><a class="header-anchor" href="#redo日志与binlog日志对比"><span>redo日志与binlog日志对比</span></a></h2><p>redo日志与binlog日志有哪些不同？<br> 其实上面好多都提到过，再次总结一遍，加深印象。</p><ol><li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有的引擎都可以使用。</li><li>redo log是物理日志，记录的是某个数据页上做了什么修改；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加一”</li><li>redo log是<code>环状结构</code>，循环写，空间固定会用完，用完后需要擦除；binlog是可以追加写入的。“追加写”是只belog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><h3 id="更新语句执行流程-与日志关系" tabindex="-1"><a class="header-anchor" href="#更新语句执行流程-与日志关系"><span>更新语句执行流程(与日志关系)</span></a></h3><p>数据库语句：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>mysql&gt; update Student set c=c+1 where ID=2;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过分析这一条更新语句，画出流程图，<strong>问题3</strong>也就得到解决。</p><figure><img src="http://img.xiaogangzai.cn/database_logSystem02.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意流程图的最后三步，这是更新语句和日志关系密切的地方，将redo日志拆成了两个步骤:prepare和commit，它俩的中间是执行器写入binlog。（注:如果不这么做，假如一个日志提交成功的时候，另一个日志提交之前发生了数据库发生了崩溃，但是crash-safe恢复或者误删库恢复的时候可能造成二者数据不统一出现问题。）</p><h2 id="开发过程中如何为mysql设置这两种保存日志的配置" tabindex="-1"><a class="header-anchor" href="#开发过程中如何为mysql设置这两种保存日志的配置"><span>开发过程中如何为mysql设置这两种保存日志的配置</span></a></h2><ul><li><p>redo log</p><p><code>innodb_flush_log_at_trx_commit</code> 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p></li><li><p>binlog</p><p>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 误删除操作（删除表数据，删除库数据） 通过binlog 仍可恢复。</p></li></ul><h2 id="如何查看这两种日志" tabindex="-1"><a class="header-anchor" href="#如何查看这两种日志"><span>如何查看这两种日志</span></a></h2><h3 id="关于日志系统的一些误区和疑问" tabindex="-1"><a class="header-anchor" href="#关于日志系统的一些误区和疑问"><span>关于日志系统的一些误区和疑问</span></a></h3><ul><li><p>大家会不会想有了redo日志就可以了，为什么还要出现binlog日志呢？</p><p>解答：</p><ol><li>redo日志是只要InnoDB引擎才提供的一个内容。</li><li>redo日志是环状结构循环写入，并且到了配置的固定大小后会被擦除，误删除数据库或表数据的时候，备份可能会出现无法全部还原。</li></ol></li><li><p>这里有一个问题：如果在擦除和记账重合那一刻，数据库异常重启了，新的数据库操作会怎么记录，是擦除一部分，记录上，会丢失，还是等待重启后往上添加数据？</p></li><li><p>关于数据库备份，是一天一备比较好，还是一周一备份比较好，一般备份文件保留多久？<strong>提出问题4解决</strong></p><p>解答：对于数据库备份周期这个问题，需要考虑以下指标：数据存量、增量、备份成本、恢复效率。</p><ol><li>如果数据存量大到一天都没法备份完成，只能一周一次甚至更长时间</li><li>业务数据的增量，如果增量非常大，如果一周备份一次，可能会出现增量备份失败问题，而且恢复时长和成功率也比较困难，则可以考虑一日一备。</li><li>业务比较重要，且对恢复时间的忍耐程度低，之前多次发生过数据回滚的需求，数据增量还不小，可以考虑一天一备。相反业务实际不重要，出问题可以容忍一定的不可用，增量还不多，可以考虑一周一备份。</li></ol><p>总的来说就是和项目，需求，场景有很多关系。</p></li><li><p>写入redo日志也是io操作，数据更新直接写入磁盘也是io操作，为什么说写入redo日志效率高节省io成本呢？</p><p>解答：redo日志的写入是顺序写入的，不用去“找位置”，而直接更新数据到磁盘的话，需要到磁盘中找到位置再写入，肯定前者的效率高。</p></li></ul><h2 id="总结与宣传" tabindex="-1"><a class="header-anchor" href="#总结与宣传"><span>总结与宣传</span></a></h2><p>以上内容是关于数据库日志系统的讲解，同时解决了我开篇提出的几个数据库日志相关的问题，希望能帮助大家更好的了解学习数据库，如果有问题可以随时关注公众号联系，互相学习哦。</p>',32)]))}const p=l(n,[["render",t]]),g=JSON.parse('{"path":"/others/database/logSystem.html","title":"删库跑路后真的没有办法弥补了吗？！","lang":"zh-CN","frontmatter":{"title":"删库跑路后真的没有办法弥补了吗？！","date":"2019-05-16T00:00:00.000Z","tags":["数据库","日志系统"],"description":"提出问题: 服务器数据库异常重启了会造成什么样的影响？ 不小心删除了数据库怎么办，或者不小心删除了数据库表中数据怎么办？ 一条更新语句在数据库系统内部执行时与数据库日志系统有什么联系？ 数据库备份，是每天一备比较好，还是每周一备比较好？ 接下来在讲解日志系统的同时，回答上面的几个问题。 日志系统详解 redo日志(重做日志) redo是引擎层的日志，而...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/others/database/logSystem.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"删库跑路后真的没有办法弥补了吗？！"}],["meta",{"property":"og:description","content":"提出问题: 服务器数据库异常重启了会造成什么样的影响？ 不小心删除了数据库怎么办，或者不小心删除了数据库表中数据怎么办？ 一条更新语句在数据库系统内部执行时与数据库日志系统有什么联系？ 数据库备份，是每天一备比较好，还是每周一备比较好？ 接下来在讲解日志系统的同时，回答上面的几个问题。 日志系统详解 redo日志(重做日志) redo是引擎层的日志，而..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://img.xiaogangzai.cn/database_logSystem01.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-14T06:23:22.000Z"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"日志系统"}],["meta",{"property":"article:published_time","content":"2019-05-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-14T06:23:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"删库跑路后真的没有办法弥补了吗？！\\",\\"image\\":[\\"http://img.xiaogangzai.cn/database_logSystem01.png\\",\\"http://img.xiaogangzai.cn/database_logSystem02.png\\"],\\"datePublished\\":\\"2019-05-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-14T06:23:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"redo日志(重做日志)","slug":"redo日志-重做日志","link":"#redo日志-重做日志","children":[{"level":3,"title":"redo中的环状结构","slug":"redo中的环状结构","link":"#redo中的环状结构","children":[]},{"level":3,"title":"redo日志作用(回答提出问题1)","slug":"redo日志作用-回答提出问题1","link":"#redo日志作用-回答提出问题1","children":[]}]},{"level":2,"title":"binlog日志(归档日志)","slug":"binlog日志-归档日志","link":"#binlog日志-归档日志","children":[{"level":3,"title":"binlog日志作用(回答提出问题2)","slug":"binlog日志作用-回答提出问题2","link":"#binlog日志作用-回答提出问题2","children":[]}]},{"level":2,"title":"redo日志与binlog日志对比","slug":"redo日志与binlog日志对比","link":"#redo日志与binlog日志对比","children":[{"level":3,"title":"更新语句执行流程(与日志关系)","slug":"更新语句执行流程-与日志关系","link":"#更新语句执行流程-与日志关系","children":[]}]},{"level":2,"title":"开发过程中如何为mysql设置这两种保存日志的配置","slug":"开发过程中如何为mysql设置这两种保存日志的配置","link":"#开发过程中如何为mysql设置这两种保存日志的配置","children":[]},{"level":2,"title":"如何查看这两种日志","slug":"如何查看这两种日志","link":"#如何查看这两种日志","children":[{"level":3,"title":"关于日志系统的一些误区和疑问","slug":"关于日志系统的一些误区和疑问","link":"#关于日志系统的一些误区和疑问","children":[]}]},{"level":2,"title":"总结与宣传","slug":"总结与宣传","link":"#总结与宣传","children":[]}],"git":{"createdTime":1739514870000,"updatedTime":1741933402000,"contributors":[{"name":"zy","username":"zy","email":"891374900@qq.com","commits":3,"url":"https://github.com/zy"}]},"readingTime":{"minutes":7.63,"words":2289},"filePathRelative":"others/database/logSystem.md","localizedDate":"2019年5月16日","excerpt":"<p>提出问题:</p>\\n<ol>\\n<li>服务器数据库异常重启了会造成什么样的影响？</li>\\n<li>不小心删除了数据库怎么办，或者不小心删除了数据库表中数据怎么办？</li>\\n<li>一条更新语句在数据库系统内部执行时与数据库日志系统有什么联系？</li>\\n<li>数据库备份，是每天一备比较好，还是每周一备比较好？<br>\\n接下来在讲解日志系统的同时，回答上面的几个问题。</li>\\n</ol>\\n<h1>日志系统详解</h1>\\n<h2>redo日志(重做日志)</h2>\\n<p><code>redo</code>是引擎层的日志，而且是InnoDB特有的。InnoDB的<code>redo log</code>是有固定大小的，比如可以配置为 一组4个文件（logfile-1，logfile-2，logfile-3，logfile-4），每个文件的大小是1GB，那么它总共可以记录4GB的操作。一个环状循环结构，从头开始写，写到末尾又回到开始循环写。</p>","autoDesc":true}');export{p as comp,g as data};
