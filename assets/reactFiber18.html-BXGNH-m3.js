import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as n}from"./app-D4yN_ylH.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<p>当然可以，以下是结合 React 源码（以 React 18 为主）对 Fiber 更新流程的专业、系统性解析。内容涵盖 Fiber 架构下更新的三个核心阶段：<strong>调度（Schedule）→ 渲染（Render）→ 提交（Commit）</strong>，并嵌入关键源码入口与术语。</p><hr><h1 id="🧠-react-fiber-架构下的更新流程详解" tabindex="-1"><a class="header-anchor" href="#🧠-react-fiber-架构下的更新流程详解"><span>🧠 React Fiber 架构下的更新流程详解</span></a></h1><hr><h3 id="✅-一、调度阶段-schedule-phase" tabindex="-1"><a class="header-anchor" href="#✅-一、调度阶段-schedule-phase"><span>✅ 一、调度阶段（Schedule Phase）</span></a></h3><p>调度阶段的核心目标是：</p><ul><li>将更新请求<strong>注册为一个任务</strong>；</li><li>按照优先级（Lanes 模型）对任务进行管理和调度；</li><li>触发或合并更新，准备进入渲染阶段。</li></ul><hr><h4 id="🔸-入口函数-scheduleupdateonfiber" tabindex="-1"><a class="header-anchor" href="#🔸-入口函数-scheduleupdateonfiber"><span>🔸 入口函数：<code>scheduleUpdateOnFiber</code></span></a></h4><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// packages/react-reconciler/src/ReactFiberWorkLoop.new.ts</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> scheduleUpdateOnFiber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fiber</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Fiber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lane</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Lane</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">eventTime</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> number</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 标记更新的 lane</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  markUpdateLaneFromFiberToRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fiber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">lane</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> root</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> markRootUpdated</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">fiberRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">lane</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">eventTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  ensureRootIsScheduled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">eventTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="🔸-关键点解释" tabindex="-1"><a class="header-anchor" href="#🔸-关键点解释"><span>🔸 关键点解释：</span></a></h4><ul><li><strong>Fiber 节点（FiberNode）</strong>：表示组件树上的每一个单元；</li><li><strong>Lane（车道模型）</strong>：代替优先级，用位图表示多个优先级更新并存；</li><li><strong>ReactEventLoop / Scheduler</strong>：协调多个优先级任务，支持时间切片。</li></ul><hr><h3 id="✅-二、渲染阶段-render-phase-或-reconciliation" tabindex="-1"><a class="header-anchor" href="#✅-二、渲染阶段-render-phase-或-reconciliation"><span>✅ 二、渲染阶段（Render Phase，或 Reconciliation）</span></a></h3><p>目标是<strong>构建新的 Fiber 树（workInProgress）</strong>，同时通过 diff 比较找出变化（副作用），收集到 effectList。</p><p>此阶段是<strong>可中断的、异步执行的</strong>，即使用 Fiber 协程 + requestIdleCallback/Scheduler 异步调度。</p><hr><h4 id="🔸-核心函数-workloopconcurrent" tabindex="-1"><a class="header-anchor" href="#🔸-核心函数-workloopconcurrent"><span>🔸 核心函数：<code>workLoopConcurrent</code></span></a></h4><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> workLoopConcurrent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">workInProgress</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shouldYield</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    performUnitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">workInProgress</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="🔸-渲染阶段核心流程" tabindex="-1"><a class="header-anchor" href="#🔸-渲染阶段核心流程"><span>🔸 渲染阶段核心流程：</span></a></h4><ol><li>从 <code>workInProgress</code> 开始深度遍历 Fiber 树；</li><li>调用 <code>beginWork()</code> 构建子 Fiber；</li><li>回溯触发 <code>completeWork()</code>；</li><li>构建 EffectList（副作用列表）。</li></ol><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> performUnitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">unitOfWork</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Fiber</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E5C07B;"> void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> current</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> unitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alternate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> next</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> beginWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">current</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">unitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">renderLanes</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  unitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">memoizedProps</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> unitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pendingProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">next</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    completeUnitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">unitOfWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    workInProgress</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="🔸-技术亮点" tabindex="-1"><a class="header-anchor" href="#🔸-技术亮点"><span>🔸 技术亮点：</span></a></h4><ul><li><strong>双缓存 Fiber 树机制</strong>：current / workInProgress；</li><li><strong>时间切片（Time Slicing）</strong>：通过 <code>shouldYield()</code> 实现可中断；</li><li><strong>优先级驱动</strong>：基于 <code>Lane</code> 进行任务调度；</li><li><strong>递归 → 协程模式</strong>：避免浏览器长任务卡顿。</li></ul><hr><h3 id="✅-三、提交阶段-commit-phase" tabindex="-1"><a class="header-anchor" href="#✅-三、提交阶段-commit-phase"><span>✅ 三、提交阶段（Commit Phase）</span></a></h3><p>此阶段会同步执行收集到的副作用操作（Effect），包括：</p><ul><li>插入 / 更新 / 删除 DOM；</li><li>执行生命周期（如 <code>componentDidMount</code>）；</li><li>调用 ref；</li><li>启动 layout effect。</li></ul><hr><h4 id="🔸-提交入口-commitroot" tabindex="-1"><a class="header-anchor" href="#🔸-提交入口-commitroot"><span>🔸 提交入口：<code>commitRoot</code></span></a></h4><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> commitRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FiberRoot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 执行 beforeMutation、mutation、layout 三个阶段</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  commitBeforeMutationEffects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  commitMutationEffects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">finishedWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  commitLayoutEffects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">finishedWork</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="🔸-技术特点" tabindex="-1"><a class="header-anchor" href="#🔸-技术特点"><span>🔸 技术特点：</span></a></h4><ul><li><strong>同步执行、不可中断</strong>；</li><li>Effect list 是一个链表，按顺序处理；</li><li>结构清晰分三段（BeforeMutation → Mutation → Layout）；</li><li>DOM 操作发生在 <code>Mutation</code> 阶段，副作用生命周期执行在 <code>Layout</code>。</li></ul><hr><h2 id="📌-fiber-架构总结术语" tabindex="-1"><a class="header-anchor" href="#📌-fiber-架构总结术语"><span>📌 Fiber 架构总结术语</span></a></h2><table><thead><tr><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>FiberNode</td><td>每个 React 元素对应的工作单元；</td></tr><tr><td>Fiber Tree</td><td>整棵组件树在内存中的表示结构；</td></tr><tr><td>workInProgress</td><td>正在构建的 Fiber Tree；</td></tr><tr><td>current</td><td>当前正在显示的 Fiber Tree；</td></tr><tr><td>Lanes</td><td>优先级模型，支持多个更新并发；</td></tr><tr><td>Scheduler</td><td>基于优先级的任务调度器；</td></tr><tr><td>shouldYield</td><td>用于实现时间切片的中断判断函数；</td></tr><tr><td>EffectList</td><td>记录需要被提交的副作用链表；</td></tr><tr><td>beginWork</td><td>协调阶段入口，执行 diff 和新节点构建；</td></tr><tr><td>completeWork</td><td>构建 DOM 结构和副作用列表；</td></tr><tr><td>commitRoot</td><td>最终将更新提交到浏览器 DOM。</td></tr></tbody></table><hr><h2 id="📊-更新流程图概览" tabindex="-1"><a class="header-anchor" href="#📊-更新流程图概览"><span>📊 更新流程图概览</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>用户触发 setState / dispatch</span></span>
<span class="line"><span>        ↓</span></span>
<span class="line"><span>scheduleUpdateOnFiber</span></span>
<span class="line"><span>        ↓</span></span>
<span class="line"><span>Scheduler 调度任务（不同 Lanes）</span></span>
<span class="line"><span>        ↓</span></span>
<span class="line"><span>render 阶段（beginWork / completeWork）</span></span>
<span class="line"><span>        ↓（可中断）</span></span>
<span class="line"><span>生成 workInProgress Tree + EffectList</span></span>
<span class="line"><span>        ↓</span></span>
<span class="line"><span>commit 阶段（commitRoot）</span></span>
<span class="line"><span>        ↓（同步）</span></span>
<span class="line"><span>更新真实 DOM，执行副作用</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,40)]))}const k=s(t,[["render",l]]),d=JSON.parse('{"path":"/posts/react/reactFiber18.html","title":"🧠 React Fiber 架构下的更新流程详解","lang":"zh-CN","frontmatter":{"description":"当然可以，以下是结合 React 源码（以 React 18 为主）对 Fiber 更新流程的专业、系统性解析。内容涵盖 Fiber 架构下更新的三个核心阶段：调度（Schedule）→ 渲染（Render）→ 提交（Commit），并嵌入关键源码入口与术语。 🧠 React Fiber 架构下的更新流程详解 ✅ 一、调度阶段（Schedule Ph...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/react/reactFiber18.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"🧠 React Fiber 架构下的更新流程详解"}],["meta",{"property":"og:description","content":"当然可以，以下是结合 React 源码（以 React 18 为主）对 Fiber 更新流程的专业、系统性解析。内容涵盖 Fiber 架构下更新的三个核心阶段：调度（Schedule）→ 渲染（Render）→ 提交（Commit），并嵌入关键源码入口与术语。 🧠 React Fiber 架构下的更新流程详解 ✅ 一、调度阶段（Schedule Ph..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-09T11:25:45.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-09T11:25:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"🧠 React Fiber 架构下的更新流程详解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-09T11:25:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"✅ 一、调度阶段（Schedule Phase）","slug":"✅-一、调度阶段-schedule-phase","link":"#✅-一、调度阶段-schedule-phase","children":[]},{"level":3,"title":"✅ 二、渲染阶段（Render Phase，或 Reconciliation）","slug":"✅-二、渲染阶段-render-phase-或-reconciliation","link":"#✅-二、渲染阶段-render-phase-或-reconciliation","children":[]},{"level":3,"title":"✅ 三、提交阶段（Commit Phase）","slug":"✅-三、提交阶段-commit-phase","link":"#✅-三、提交阶段-commit-phase","children":[]},{"level":2,"title":"📌 Fiber 架构总结术语","slug":"📌-fiber-架构总结术语","link":"#📌-fiber-架构总结术语","children":[]},{"level":2,"title":"📊 更新流程图概览","slug":"📊-更新流程图概览","link":"#📊-更新流程图概览","children":[]}],"git":{"createdTime":1746789945000,"updatedTime":1746789945000,"contributors":[{"name":"zouyu","username":"zouyu","email":"891374900@qq.com","commits":1,"url":"https://github.com/zouyu"}]},"readingTime":{"minutes":2.61,"words":784},"filePathRelative":"posts/react/reactFiber18.md","localizedDate":"2025年5月9日","excerpt":"<p>当然可以，以下是结合 React 源码（以 React 18 为主）对 Fiber 更新流程的专业、系统性解析。内容涵盖 Fiber 架构下更新的三个核心阶段：<strong>调度（Schedule）→ 渲染（Render）→ 提交（Commit）</strong>，并嵌入关键源码入口与术语。</p>\\n<hr>\\n<h1>🧠 React Fiber 架构下的更新流程详解</h1>\\n<hr>\\n<h3>✅ 一、调度阶段（Schedule Phase）</h3>\\n<p>调度阶段的核心目标是：</p>\\n<ul>\\n<li>将更新请求<strong>注册为一个任务</strong>；</li>\\n<li>按照优先级（Lanes 模型）对任务进行管理和调度；</li>\\n<li>触发或合并更新，准备进入渲染阶段。</li>\\n</ul>","autoDesc":true}');export{k as comp,d as data};
