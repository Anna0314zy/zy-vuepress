import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e,o as a}from"./app-D4yN_ylH.js";const n={};function r(l,i){return a(),t("div",null,i[0]||(i[0]=[e(`<h3 id="🚀-webpack-require-context-vs-vite-import-meta-glob-对比" tabindex="-1"><a class="header-anchor" href="#🚀-webpack-require-context-vs-vite-import-meta-glob-对比"><span><strong>🚀 <code>webpack require.context()</code> vs <code>Vite import.meta.glob()</code> 对比</strong></span></a></h3><p>在 Webpack 和 Vite 中，我们可以使用 <strong>动态导入（Dynamic Import）</strong> 批量引入文件，比如<strong>自动导入组件、国际化 JSON 文件、Markdown 文章等</strong>。</p><ul><li><strong>Webpack</strong> 提供了 <code>require.context()</code></li><li><strong>Vite</strong> 提供了 <code>import.meta.glob()</code></li></ul><p><strong>📌 主要区别</strong>：Vite 的 <code>import.meta.glob()</code> 更快、更灵活，支持 <strong>懒加载（Lazy Loading）</strong>。</p><hr><h2 id="🔥-1-webpack-require-context" tabindex="-1"><a class="header-anchor" href="#🔥-1-webpack-require-context"><span><strong>🔥 1. <code>webpack require.context()</code></strong></span></a></h2><p>📌 <strong>Webpack 提供 <code>require.context()</code> 用于动态引入模块</strong>（主要用于 <code>require()</code>）。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">context</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./modules&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">js</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> files</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">keys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">files</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>📌 说明：</strong></p><ul><li><code>./modules</code>：要搜索的目录</li><li><code>false</code>：是否递归搜索子目录（<code>true</code> 递归）</li><li><code>/\\.js$/</code>：匹配 <code>.js</code> 结尾的文件</li></ul><hr><h2 id="🔥-2-vite-import-meta-glob-推荐" tabindex="-1"><a class="header-anchor" href="#🔥-2-vite-import-meta-glob-推荐"><span><strong>🔥 2. <code>vite import.meta.glob()</code>（推荐）</strong></span></a></h2><p>📌 <strong>Vite 使用 <code>import.meta.glob()</code> 更强大，可以按需动态导入（懒加载）。</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">glob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./modules/*.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 批量导入所有文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forEach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(([</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">importer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  importer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`Loaded </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>📌 说明：</strong></p><ul><li><strong>不立即加载</strong>，返回 <code>{ &#39;文件路径&#39;: () =&gt; import(&#39;文件&#39;) }</code></li><li><strong>需要手动 <code>.then()</code> 加载模块</strong></li><li><strong>适用于按需动态导入，优化性能</strong></li></ul><hr><h2 id="🎯-webpack-require-context-vs-vite-import-meta-glob-对比" tabindex="-1"><a class="header-anchor" href="#🎯-webpack-require-context-vs-vite-import-meta-glob-对比"><span><strong>🎯 Webpack <code>require.context()</code> vs Vite <code>import.meta.glob()</code> 对比</strong></span></a></h2><table><thead><tr><th><strong>对比项</strong></th><th><strong>Webpack <code>require.context()</code></strong></th><th><strong>Vite <code>import.meta.glob()</code></strong></th></tr></thead><tbody><tr><td><strong>支持环境</strong></td><td>仅 Webpack</td><td>仅 Vite</td></tr><tr><td><strong>是否立即加载</strong></td><td>✅ 立即加载所有模块</td><td>🚀 <strong>默认不加载，按需加载</strong></td></tr><tr><td><strong>支持懒加载</strong></td><td>❌ 不支持</td><td>✅ <strong>支持 <code>import.meta.globEager()</code> 立即加载</strong></td></tr><tr><td><strong>代码优化</strong></td><td>📦 <strong>所有模块打包到一起</strong></td><td>⚡ <strong>只加载需要的模块（更快）</strong></td></tr><tr><td><strong>使用方式</strong></td><td><code>require.context()</code> 只能 <code>require()</code></td><td><code>import.meta.glob()</code> 支持 <code>import()</code></td></tr></tbody></table><hr><h2 id="🔥-3-import-meta-globeager-vite-立即加载-类似-webpack" tabindex="-1"><a class="header-anchor" href="#🔥-3-import-meta-globeager-vite-立即加载-类似-webpack"><span><strong>🔥 3. <code>import.meta.globEager()</code>（Vite 立即加载，类似 Webpack）</strong></span></a></h2><p>如果想要 Vite <strong>立即加载所有模块</strong>（像 <code>require.context()</code>），可以用 <code>import.meta.globEager()</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">globEager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./modules/*.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 直接返回 { &#39;./modules/a.js&#39;: Module, &#39;./modules/b.js&#39;: Module }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>📌 <strong>适用于</strong>：</p><ul><li><strong>不需要懒加载</strong>，希望和 Webpack <code>require.context()</code> 一样的效果</li><li><strong>编译时静态分析</strong>，Vite 直接打包所有模块</li></ul><hr><h2 id="🚀-什么时候用-require-context-什么时候用-import-meta-glob" tabindex="-1"><a class="header-anchor" href="#🚀-什么时候用-require-context-什么时候用-import-meta-glob"><span><strong>🚀 什么时候用 <code>require.context()</code>，什么时候用 <code>import.meta.glob()</code>？</strong></span></a></h2><table><thead><tr><th><strong>场景</strong></th><th><strong>Webpack（require.context）</strong></th><th><strong>Vite（import.meta.glob）</strong></th></tr></thead><tbody><tr><td><strong>批量导入组件</strong></td><td>✅ 适用</td><td>✅ <strong>更推荐（懒加载支持）</strong></td></tr><tr><td><strong>国际化 JSON 语言包</strong></td><td>✅ 适用</td><td>✅ <strong>更灵活（按需加载）</strong></td></tr><tr><td><strong>动态 Markdown 文件</strong></td><td>🚫 可能需要插件</td><td>✅ <strong>支持动态导入</strong></td></tr><tr><td><strong>静态资源（图片、SVG）</strong></td><td>✅ 适用</td><td>✅ <strong>更高效</strong></td></tr></tbody></table><p>📌 <strong>如果你是 Webpack 项目</strong>，只能用 <code>require.context()</code>。<br> 📌 <strong>如果你是 Vite 项目</strong>，建议 <strong><code>import.meta.glob()</code></strong>（默认懒加载）。</p><hr><h2 id="🎯-结论" tabindex="-1"><a class="header-anchor" href="#🎯-结论"><span><strong>🎯 结论</strong></span></a></h2><p>✅ <strong>WebPack (<code>require.context()</code>) 适用于：</strong></p><ul><li>Webpack 项目中批量导入文件</li><li>立即加载所有模块（不支持懒加载）</li></ul><p>✅ <strong>Vite (<code>import.meta.glob()</code>) 适用于：</strong></p><ul><li><strong>更高效的模块导入</strong>（默认懒加载，提升性能）</li><li><strong>支持动态导入（Markdown、JSON、图片等）</strong></li><li><strong>按需加载，减少打包体积</strong></li></ul>`,35)]))}const p=s(n,[["render",r]]),k=JSON.parse('{"path":"/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/context.html","title":"context vs glob","lang":"zh-CN","frontmatter":{"title":"context vs glob","tags":["工程化"],"description":"🚀 webpack require.context() vs Vite import.meta.glob() 对比 在 Webpack 和 Vite 中，我们可以使用 动态导入（Dynamic Import） 批量引入文件，比如自动导入组件、国际化 JSON 文件、Markdown 文章等。 Webpack 提供了 require.context()...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/context.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"context vs glob"}],["meta",{"property":"og:description","content":"🚀 webpack require.context() vs Vite import.meta.glob() 对比 在 Webpack 和 Vite 中，我们可以使用 动态导入（Dynamic Import） 批量引入文件，比如自动导入组件、国际化 JSON 文件、Markdown 文章等。 Webpack 提供了 require.context()..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-21T08:09:38.000Z"}],["meta",{"property":"article:tag","content":"工程化"}],["meta",{"property":"article:modified_time","content":"2025-05-21T08:09:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"context vs glob\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-21T08:09:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"🚀 webpack require.context() vs Vite import.meta.glob() 对比","slug":"🚀-webpack-require-context-vs-vite-import-meta-glob-对比","link":"#🚀-webpack-require-context-vs-vite-import-meta-glob-对比","children":[]},{"level":2,"title":"🔥 1. webpack require.context()","slug":"🔥-1-webpack-require-context","link":"#🔥-1-webpack-require-context","children":[]},{"level":2,"title":"🔥 2. vite import.meta.glob()（推荐）","slug":"🔥-2-vite-import-meta-glob-推荐","link":"#🔥-2-vite-import-meta-glob-推荐","children":[]},{"level":2,"title":"🎯 Webpack require.context() vs Vite import.meta.glob() 对比","slug":"🎯-webpack-require-context-vs-vite-import-meta-glob-对比","link":"#🎯-webpack-require-context-vs-vite-import-meta-glob-对比","children":[]},{"level":2,"title":"🔥 3. import.meta.globEager()（Vite 立即加载，类似 Webpack）","slug":"🔥-3-import-meta-globeager-vite-立即加载-类似-webpack","link":"#🔥-3-import-meta-globeager-vite-立即加载-类似-webpack","children":[]},{"level":2,"title":"🚀 什么时候用 require.context()，什么时候用 import.meta.glob()？","slug":"🚀-什么时候用-require-context-什么时候用-import-meta-glob","link":"#🚀-什么时候用-require-context-什么时候用-import-meta-glob","children":[]},{"level":2,"title":"🎯 结论","slug":"🎯-结论","link":"#🎯-结论","children":[]}],"git":{"createdTime":1742355093000,"updatedTime":1747814978000,"contributors":[{"name":"zy","username":"zy","email":"891374900@qq.com","commits":2,"url":"https://github.com/zy"}]},"readingTime":{"minutes":2.01,"words":604},"filePathRelative":"posts/前端工程化/context.md","localizedDate":"2025年3月19日","excerpt":"<h3><strong>🚀 <code>webpack require.context()</code> vs <code>Vite import.meta.glob()</code> 对比</strong></h3>\\n<p>在 Webpack 和 Vite 中，我们可以使用 <strong>动态导入（Dynamic Import）</strong> 批量引入文件，比如<strong>自动导入组件、国际化 JSON 文件、Markdown 文章等</strong>。</p>\\n<ul>\\n<li><strong>Webpack</strong> 提供了 <code>require.context()</code></li>\\n<li><strong>Vite</strong> 提供了 <code>import.meta.glob()</code></li>\\n</ul>","autoDesc":true}');export{p as comp,k as data};
