import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as i,o as l}from"./app-D4yN_ylH.js";const d={};function n(s,t){return l(),a("div",null,t[0]||(t[0]=[i(`<p>微前端架构的整体演进过程是伴随着前端工程化发展、团队协作复杂化和项目体量增大而出现的，其目标是<strong>将单体式前端应用解耦成多个可独立开发、部署和运行的子应用</strong>，类似后端微服务架构。</p><hr><h2 id="一、背景与动因" tabindex="-1"><a class="header-anchor" href="#一、背景与动因"><span>一、背景与动因</span></a></h2><h3 id="_1-1-单体前端架构的问题" tabindex="-1"><a class="header-anchor" href="#_1-1-单体前端架构的问题"><span>1.1 单体前端架构的问题</span></a></h3><ul><li>所有模块都集中在一个仓库，构建一次全量发布；</li><li>大型团队协作困难，改动容易产生冲突；</li><li>技术栈无法灵活演进，多个团队共享相同框架；</li><li>用户访问时加载成本高，难以按需加载。</li></ul><hr><h2 id="二、微前端架构的演进阶段" tabindex="-1"><a class="header-anchor" href="#二、微前端架构的演进阶段"><span>二、微前端架构的演进阶段</span></a></h2><h3 id="阶段一-模块化开发-module-based" tabindex="-1"><a class="header-anchor" href="#阶段一-模块化开发-module-based"><span><strong>阶段一：模块化开发（Module Based）</strong></span></a></h3><ul><li>技术代表：CommonJS / AMD / ES Modules</li><li>核心思想：代码逻辑上按功能拆分，仍然是一个构建产物</li><li>优点：结构清晰，可复用，便于维护</li><li>局限：构建时仍为整体打包，部署发布耦合严重</li></ul><hr><h3 id="阶段二-多仓库管理-iframe-集成" tabindex="-1"><a class="header-anchor" href="#阶段二-多仓库管理-iframe-集成"><span><strong>阶段二：多仓库管理 + iframe 集成</strong></span></a></h3><ul><li><p>使用 <code>iframe</code> 将多个应用拼接到主页面</p></li><li><p>优点：</p><ul><li>子应用完全隔离，技术栈无关</li><li>可独立部署</li></ul></li><li><p>缺点：</p><ul><li>性能差（多次加载页面、通信困难）</li><li>用户体验差（URL 不统一、样式不一致）</li><li>SEO、路由不友好</li></ul></li></ul><hr><h3 id="阶段三-前端集成框架-如-single-spa、qiankun" tabindex="-1"><a class="header-anchor" href="#阶段三-前端集成框架-如-single-spa、qiankun"><span><strong>阶段三：前端集成框架（如 single-spa、qiankun）</strong></span></a></h3><ul><li><p>核心思想：多个子应用加载到主应用中，在一个页面内运行</p></li><li><p>主要技术点：</p><ul><li>应用注册与生命周期管理</li><li>沙箱机制保障隔离</li><li>路由劫持统一控制页面跳转</li><li>样式/JS 隔离与通信机制</li></ul></li></ul><h4 id="主流框架" tabindex="-1"><a class="header-anchor" href="#主流框架"><span>主流框架：</span></a></h4><table><thead><tr><th>框架</th><th>特点</th></tr></thead><tbody><tr><td>single-spa</td><td>微前端开山之作，核心能力完善，API 灵活但复杂</td></tr><tr><td>qiankun</td><td>阿里基于 single-spa 封装，支持 JS 沙箱，接入成本低，生态完善</td></tr><tr><td>micro-app</td><td>更现代化的方案，沙箱能力更强，支持多种加载模式</td></tr><tr><td>icestark</td><td>阿里冰箱团队推出，适用于 React 应用，集成 icejs 更方便</td></tr></tbody></table><hr><h2 id="三、典型架构图" tabindex="-1"><a class="header-anchor" href="#三、典型架构图"><span>三、典型架构图</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>                  ┌────────────────────┐</span></span>
<span class="line"><span>                  │     主应用（壳）    │</span></span>
<span class="line"><span>                  └────────────────────┘</span></span>
<span class="line"><span>                           │</span></span>
<span class="line"><span>        ┌────────┬─────────┴─────────┬──────────┐</span></span>
<span class="line"><span>        ▼        ▼                   ▼          ▼</span></span>
<span class="line"><span>  子应用A    子应用B             子应用C    子应用D</span></span>
<span class="line"><span>(Vue)     (React)             (Angular)  (任意框架)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>每个子应用可单独开发、部署；</li><li>主应用负责路由分发、通信协调；</li><li>子应用通过沙箱加载，实现样式与 JS 隔离；</li><li>统一通信机制实现全局事件共享。</li></ul><hr><h2 id="四、微前端关键技术点" tabindex="-1"><a class="header-anchor" href="#四、微前端关键技术点"><span>四、微前端关键技术点</span></a></h2><table><thead><tr><th>技术点</th><th>说明</th></tr></thead><tbody><tr><td>应用注册</td><td>注册多个子应用，定义其名称、路由、加载方式等</td></tr><tr><td>加载/卸载</td><td>子应用按需加载，切换路由时卸载并销毁</td></tr><tr><td>沙箱隔离</td><td>防止 CSS、JS 全局污染，典型方案：Shadow DOM、Proxy 沙箱、CSS Scope</td></tr><tr><td>路由管理</td><td>主子应用路由同步，URL 保持一致</td></tr><tr><td>通信机制</td><td>发布订阅、全局共享状态、事件总线等方式连接主子应用</td></tr><tr><td>独立部署</td><td>子应用可独立打包上线，支持团队并行开发和部署</td></tr></tbody></table><hr><h2 id="五、当前主流方案对比-补充-micro-app" tabindex="-1"><a class="header-anchor" href="#五、当前主流方案对比-补充-micro-app"><span>五、当前主流方案对比（补充 micro-app）</span></a></h2><table><thead><tr><th>特性</th><th>single-spa</th><th>qiankun</th><th>micro-app</th></tr></thead><tbody><tr><td>开箱即用</td><td>✖</td><td>✅</td><td>✅</td></tr><tr><td>技术栈兼容</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>样式隔离</td><td>✖（需配合插件）</td><td>✅（Scoped CSS）</td><td>✅（Shadow DOM/CSS隔离）</td></tr><tr><td>JS 隔离（沙箱）</td><td>✖</td><td>✅</td><td>✅（多种模式）</td></tr><tr><td>应用通信</td><td>基于事件</td><td>提供 API</td><td>支持 props/event/globalData</td></tr><tr><td>文档与社区</td><td>中等</td><td>较大</td><td>中等</td></tr><tr><td>子应用预加载</td><td>需手动</td><td>✅</td><td>✅</td></tr><tr><td>子应用 KeepAlive</td><td>✖</td><td>✅</td><td>✅（支持 keep-alive）</td></tr></tbody></table><hr><h2 id="六、未来趋势与实践建议" tabindex="-1"><a class="header-anchor" href="#六、未来趋势与实践建议"><span>六、未来趋势与实践建议</span></a></h2><ul><li>✅ 单页微前端正在成熟化，推荐使用 <code>qiankun</code> 或 <code>micro-app</code></li><li>✅ 跨技术栈更易实现，支持 Vue、React、Angular 共存</li><li>⚠️ 子应用建议保持简洁，避免深度嵌套多个子子应用</li><li>✅ 微前端适用于大型团队 + 多产品线，不建议小项目引入</li></ul><hr>`,31)]))}const h=e(d,[["render",n]]),o=JSON.parse('{"path":"/posts/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%BC%94%E8%BF%9B.html","title":"微前端演进","lang":"zh-CN","frontmatter":{"title":"微前端演进","tags":["微前端"],"description":"微前端架构的整体演进过程是伴随着前端工程化发展、团队协作复杂化和项目体量增大而出现的，其目标是将单体式前端应用解耦成多个可独立开发、部署和运行的子应用，类似后端微服务架构。 一、背景与动因 1.1 单体前端架构的问题 所有模块都集中在一个仓库，构建一次全量发布； 大型团队协作困难，改动容易产生冲突； 技术栈无法灵活演进，多个团队共享相同框架； 用户访问...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AF%E6%BC%94%E8%BF%9B.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"微前端演进"}],["meta",{"property":"og:description","content":"微前端架构的整体演进过程是伴随着前端工程化发展、团队协作复杂化和项目体量增大而出现的，其目标是将单体式前端应用解耦成多个可独立开发、部署和运行的子应用，类似后端微服务架构。 一、背景与动因 1.1 单体前端架构的问题 所有模块都集中在一个仓库，构建一次全量发布； 大型团队协作困难，改动容易产生冲突； 技术栈无法灵活演进，多个团队共享相同框架； 用户访问..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-04T12:00:27.000Z"}],["meta",{"property":"article:tag","content":"微前端"}],["meta",{"property":"article:modified_time","content":"2025-08-04T12:00:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微前端演进\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-04T12:00:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、背景与动因","slug":"一、背景与动因","link":"#一、背景与动因","children":[{"level":3,"title":"1.1 单体前端架构的问题","slug":"_1-1-单体前端架构的问题","link":"#_1-1-单体前端架构的问题","children":[]}]},{"level":2,"title":"二、微前端架构的演进阶段","slug":"二、微前端架构的演进阶段","link":"#二、微前端架构的演进阶段","children":[{"level":3,"title":"阶段一：模块化开发（Module Based）","slug":"阶段一-模块化开发-module-based","link":"#阶段一-模块化开发-module-based","children":[]},{"level":3,"title":"阶段二：多仓库管理 + iframe 集成","slug":"阶段二-多仓库管理-iframe-集成","link":"#阶段二-多仓库管理-iframe-集成","children":[]},{"level":3,"title":"阶段三：前端集成框架（如 single-spa、qiankun）","slug":"阶段三-前端集成框架-如-single-spa、qiankun","link":"#阶段三-前端集成框架-如-single-spa、qiankun","children":[]}]},{"level":2,"title":"三、典型架构图","slug":"三、典型架构图","link":"#三、典型架构图","children":[]},{"level":2,"title":"四、微前端关键技术点","slug":"四、微前端关键技术点","link":"#四、微前端关键技术点","children":[]},{"level":2,"title":"五、当前主流方案对比（补充 micro-app）","slug":"五、当前主流方案对比-补充-micro-app","link":"#五、当前主流方案对比-补充-micro-app","children":[]},{"level":2,"title":"六、未来趋势与实践建议","slug":"六、未来趋势与实践建议","link":"#六、未来趋势与实践建议","children":[]}],"git":{"createdTime":1754308827000,"updatedTime":1754308827000,"contributors":[{"name":"zouyu","username":"zouyu","email":"891374900@qq.com","commits":1,"url":"https://github.com/zouyu"}]},"readingTime":{"minutes":3.14,"words":943},"filePathRelative":"posts/微前端/微前端演进.md","localizedDate":"2025年8月4日","excerpt":"<p>微前端架构的整体演进过程是伴随着前端工程化发展、团队协作复杂化和项目体量增大而出现的，其目标是<strong>将单体式前端应用解耦成多个可独立开发、部署和运行的子应用</strong>，类似后端微服务架构。</p>\\n<hr>\\n<h2>一、背景与动因</h2>\\n<h3>1.1 单体前端架构的问题</h3>\\n<ul>\\n<li>所有模块都集中在一个仓库，构建一次全量发布；</li>\\n<li>大型团队协作困难，改动容易产生冲突；</li>\\n<li>技术栈无法灵活演进，多个团队共享相同框架；</li>\\n<li>用户访问时加载成本高，难以按需加载。</li>\\n</ul>\\n<hr>\\n<h2>二、微前端架构的演进阶段</h2>","autoDesc":true}');export{h as comp,o as data};
