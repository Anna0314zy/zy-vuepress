import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as i}from"./app-D4yN_ylH.js";const l={};function p(d,s){return i(),a("div",null,s[0]||(s[0]=[e(`<h2 id="redis多数据库" tabindex="-1"><a class="header-anchor" href="#redis多数据库"><span>redis多数据库</span></a></h2><p>说明：一个redis实例可以包含多个数据库，客户端可以指定连接某个数据库（与MySql客户端我们创建多个数据库类似）一个redis实例最多可以提供16个数据库，下标是从0到15，默认连接的是第0号数据库。</p><p>代码相关演示:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>127.0.0.1:6379&gt; select 1  //选择数据库1</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379[1]&gt; keys *</span></span>
<span class="line"><span>(empty list or set)</span></span>
<span class="line"><span>127.0.0.1:6379[1]&gt; select 0</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; set string1 2 </span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379&gt; keys *  //查询所有的key</span></span>
<span class="line"><span>1) &quot;hsah1&quot;</span></span>
<span class="line"><span>2) &quot;list1&quot;</span></span>
<span class="line"><span>3) &quot;set1&quot;</span></span>
<span class="line"><span>4) &quot;list2&quot;</span></span>
<span class="line"><span>5) &quot;string1&quot;</span></span>
<span class="line"><span>6) &quot;hash1&quot;</span></span>
<span class="line"><span>7) &quot;string2&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; move list1 1  //移动list1到数据库1</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; move set1 1</span></span>
<span class="line"><span>(integer) 1</span></span>
<span class="line"><span>127.0.0.1:6379&gt; keys *</span></span>
<span class="line"><span>1) &quot;hsah1&quot;</span></span>
<span class="line"><span>2) &quot;list2&quot;</span></span>
<span class="line"><span>3) &quot;string1&quot;</span></span>
<span class="line"><span>4) &quot;hash1&quot;</span></span>
<span class="line"><span>5) &quot;string2&quot;</span></span>
<span class="line"><span>127.0.0.1:6379&gt; select 1 </span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>127.0.0.1:6379[1]&gt; keys *</span></span>
<span class="line"><span>1) &quot;list1&quot;</span></span>
<span class="line"><span>2) &quot;set1&quot;</span></span>
<span class="line"><span>127.0.0.1:6379[1]&gt; type set1 //获取数据类型</span></span>
<span class="line"><span>set</span></span>
<span class="line"><span>127.0.0.1:6379[1]&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以试着敲一遍，查看注释基本明白了redis多数据库的使用</p><h2 id="redis事务的概念" tabindex="-1"><a class="header-anchor" href="#redis事务的概念"><span>redis事务的概念</span></a></h2><ul><li>事务的基本命令</li></ul><p>1）multi 标记一个事务的开始</p><p>2）exec 执行所有事务块内的命令</p><p>3）discard 取消事务，放弃执行事务块内的所有命令</p><ul><li>事务特性</li></ul><p>1）事务中的命令都是串行执行的。</p><p>2）事务执行期间redis不会再对其它的客户端提供任何服务，从而保证事务中的命令能够原子化执行。</p><p>3）单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。事务可以理解为一个打包的批量执行脚本，但批量指令并非原子化的操作，中间某条指令的失败不会导致前面已做指令的回滚，也不会造成后续的指令不做。</p><ul><li>代码实例</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>redis 127.0.0.1:6379&gt; MULTI   //开启事务</span></span>
<span class="line"><span>OK</span></span>
<span class="line"><span>redis 127.0.0.1:6379&gt; SET book-name &quot;Mastering C++ in 21 days&quot;</span></span>
<span class="line"><span>QUEUED</span></span>
<span class="line"><span>redis 127.0.0.1:6379&gt; GET book-name</span></span>
<span class="line"><span>QUEUED</span></span>
<span class="line"><span>redis 127.0.0.1:6379&gt; SADD tag &quot;C++&quot; &quot;Programming&quot; &quot;Mastering Series&quot;</span></span>
<span class="line"><span>QUEUED</span></span>
<span class="line"><span>redis 127.0.0.1:6379&gt; SMEMBERS tag</span></span>
<span class="line"><span>QUEUED</span></span>
<span class="line"><span>redis 127.0.0.1:6379&gt; EXEC //提交事务</span></span>
<span class="line"><span>1) OK</span></span>
<span class="line"><span>2) &quot;Mastering C++ in 21 days&quot;</span></span>
<span class="line"><span>3) (integer) 3</span></span>
<span class="line"><span>4) 1) &quot;Mastering Series&quot;</span></span>
<span class="line"><span>   2) &quot;C++&quot;</span></span>
<span class="line"><span>   3) &quot;Programming&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis数据持久化" tabindex="-1"><a class="header-anchor" href="#redis数据持久化"><span>redis数据持久化</span></a></h2><ul><li>RDB数据持久化方式</li></ul><blockquote><p>优势</p></blockquote><p>1）redis数据库会只包含一个文件存储在硬盘中，对于文件备份会简单很多。</p><p>2）对于灾难恢复，RDB是更好的选择，因为一个文件可以直接拷贝走，拷贝回来。</p><p>3）性能最大化，redis开始持久化的时候只分出一些子进程，之后这些子进程会完成持久化工作,避免了服务器进程执行io的操作。数据集很大的时候，启动效率会更高。</p><blockquote><p>缺点</p></blockquote><p>1）最大限度的避免数据丢失，RDB做的不是特别好，系统一定在定时持久化之前出现一些档期的情况，还没有来得及往硬盘上写，数据已经丢失掉。</p><p>2）因为RDB是通过开启子进程的方式来进行持久化操作的，因此当数据集比较大的时候，这个过程可能会导致服务器停止一定事件，几十毫秒甚至1秒。</p><blockquote><p>配置</p></blockquote><p>linux目录中/usr/local/redis/redis-conf目录中找到这样的几行代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>save 900 1</span></span>
<span class="line"><span>save 300 10</span></span>
<span class="line"><span>save 60 10000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一行代码表示：900秒，也就是15分钟至少又一个key发生变化就会持久化一次。</p><p>第二行代码表示：300秒，至少有10个key发生变化就会往硬盘中持久化一次。</p><p>第三行代码表示：60秒，至少有10000个key发生变化就会往硬盘中持久化一次。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>dbfilename dump.rdb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置中继续往下看，看到这样一行代码，这个dump是数据库的名字。</p><p>往下一段代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>dir ./</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>保存路径位置，就是当前目录下的上面的名字，就是持久化的数据库</p><ul><li>AOF数据持久化方式</li></ul><blockquote><p>优势</p></blockquote><p>1)可以带来更高的数据安全性，这种数据持久化方式有三种同步策略，每秒同步，每修改同步（每一次发生数据的变化都会立即被记录到磁盘中，效率最低但是最安全），不同步。</p><p>2）日志的写入操作是采用append追加的模式，在写入过程中即使出现服务器档期问题，也不会破坏日志文件中已经写入的内容。</p><p>3）如果日志过大，redis可以自动启动重写机制，redis会不断的将修改的数据写入到老的磁盘当中，同时redis会创建一个新的文件来记录此期间产生了哪些修改命令被执行了。</p><p>4）AOF包含一个格式非常清晰易于理解的日志文件，用于记录所有的修改操作。通过这个文件就可以完成数据的重建。</p><blockquote><p>劣势</p></blockquote><p>1）对于相同的数据集文件，AOF要比RDB文件大。</p><p>2）根据同步策略的不同，AOF在运行效率上往往低于RDB，AOF每修改就同步到硬盘上效率肯定是没有RDB高的。</p><pre><code>&gt;   配置
</code></pre><p>linux目录中/usr/local/redis/redis-conf目录中找到这样的几行代码</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>appendonly no</span></span>
<span class="line"><span></span></span>
<span class="line"><span># The name of the append only file(default:&quot;appendonly.aof&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>appendfilename &quot;appendonly.aof&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用AOF的持久还方式，需要把appendonly 后面的属性变为yes</p><p>appendonly.aof是用来记录所有修改操作的文件，这个文件还可以用来进行数据的恢复等，例如一条删除操作成功后，我们在appendonly.aof文件中把删除命令去掉，重新运行redis，之前的数据又都会恢复</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># appendfsync always</span></span>
<span class="line"><span>appendfsync everysec</span></span>
<span class="line"><span># appendfsync no</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码是关于同步策略的一个设置，第一条是每修改就同步持久化，第二条是每秒同步持久化一次，第三条是不同步持久化。</p>`,52)]))}const c=n(l,[["render",p]]),v=JSON.parse('{"path":"/others/database/detail-redis2.html","title":"Redis详细学习 进阶篇","lang":"zh-CN","frontmatter":{"title":"Redis详细学习 进阶篇","date":"2019-05-09T00:00:00.000Z","tags":["Redis"],"description":"redis多数据库 说明：一个redis实例可以包含多个数据库，客户端可以指定连接某个数据库（与MySql客户端我们创建多个数据库类似）一个redis实例最多可以提供16个数据库，下标是从0到15，默认连接的是第0号数据库。 代码相关演示: 可以试着敲一遍，查看注释基本明白了redis多数据库的使用 redis事务的概念 事务的基本命令 1）multi...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/others/database/detail-redis2.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"Redis详细学习 进阶篇"}],["meta",{"property":"og:description","content":"redis多数据库 说明：一个redis实例可以包含多个数据库，客户端可以指定连接某个数据库（与MySql客户端我们创建多个数据库类似）一个redis实例最多可以提供16个数据库，下标是从0到15，默认连接的是第0号数据库。 代码相关演示: 可以试着敲一遍，查看注释基本明白了redis多数据库的使用 redis事务的概念 事务的基本命令 1）multi..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-14T06:23:22.000Z"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2019-05-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-14T06:23:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis详细学习 进阶篇\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-05-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-14T06:23:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"redis多数据库","slug":"redis多数据库","link":"#redis多数据库","children":[]},{"level":2,"title":"redis事务的概念","slug":"redis事务的概念","link":"#redis事务的概念","children":[]},{"level":2,"title":"redis数据持久化","slug":"redis数据持久化","link":"#redis数据持久化","children":[]}],"git":{"createdTime":1739514870000,"updatedTime":1741933402000,"contributors":[{"name":"zy","username":"zy","email":"891374900@qq.com","commits":3,"url":"https://github.com/zy"}]},"readingTime":{"minutes":5.03,"words":1508},"filePathRelative":"others/database/detail-redis2.md","localizedDate":"2019年5月9日","excerpt":"<h2>redis多数据库</h2>\\n<p>说明：一个redis实例可以包含多个数据库，客户端可以指定连接某个数据库（与MySql客户端我们创建多个数据库类似）一个redis实例最多可以提供16个数据库，下标是从0到15，默认连接的是第0号数据库。</p>\\n<p>代码相关演示:</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" data-title=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>127.0.0.1:6379&gt; select 1  //选择数据库1</span></span>\\n<span class=\\"line\\"><span>OK</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379[1]&gt; keys *</span></span>\\n<span class=\\"line\\"><span>(empty list or set)</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379[1]&gt; select 0</span></span>\\n<span class=\\"line\\"><span>OK</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379&gt; set string1 2 </span></span>\\n<span class=\\"line\\"><span>OK</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379&gt; keys *  //查询所有的key</span></span>\\n<span class=\\"line\\"><span>1) \\"hsah1\\"</span></span>\\n<span class=\\"line\\"><span>2) \\"list1\\"</span></span>\\n<span class=\\"line\\"><span>3) \\"set1\\"</span></span>\\n<span class=\\"line\\"><span>4) \\"list2\\"</span></span>\\n<span class=\\"line\\"><span>5) \\"string1\\"</span></span>\\n<span class=\\"line\\"><span>6) \\"hash1\\"</span></span>\\n<span class=\\"line\\"><span>7) \\"string2\\"</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379&gt; move list1 1  //移动list1到数据库1</span></span>\\n<span class=\\"line\\"><span>(integer) 1</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379&gt; move set1 1</span></span>\\n<span class=\\"line\\"><span>(integer) 1</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379&gt; keys *</span></span>\\n<span class=\\"line\\"><span>1) \\"hsah1\\"</span></span>\\n<span class=\\"line\\"><span>2) \\"list2\\"</span></span>\\n<span class=\\"line\\"><span>3) \\"string1\\"</span></span>\\n<span class=\\"line\\"><span>4) \\"hash1\\"</span></span>\\n<span class=\\"line\\"><span>5) \\"string2\\"</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379&gt; select 1 </span></span>\\n<span class=\\"line\\"><span>OK</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379[1]&gt; keys *</span></span>\\n<span class=\\"line\\"><span>1) \\"list1\\"</span></span>\\n<span class=\\"line\\"><span>2) \\"set1\\"</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379[1]&gt; type set1 //获取数据类型</span></span>\\n<span class=\\"line\\"><span>set</span></span>\\n<span class=\\"line\\"><span>127.0.0.1:6379[1]&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,v as data};
