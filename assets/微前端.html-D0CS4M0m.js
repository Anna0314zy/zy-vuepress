import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as t,o as n}from"./app-D4yN_ylH.js";const e={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[t(`<ul><li><a href="https://zhuanlan.zhihu.com/p/458979302" target="_blank" rel="noopener noreferrer">文章推荐</a></li></ul><p><code>micro-app</code> 和 <code>qiankun</code> 都是流行的微前端框架，它们的目标一致：<strong>实现多个子应用的独立开发、独立部署、统一接入</strong>。但它们在架构设计、实现方式、兼容性、使用体验等方面存在明显差异。</p><p>下面是全面对比，供你做技术选型时参考：</p><hr><h2 id="🧱-一、基本信息对比" tabindex="-1"><a class="header-anchor" href="#🧱-一、基本信息对比"><span>🧱 一、基本信息对比</span></a></h2><table><thead><tr><th>项目</th><th>qiankun</th><th>micro-app</th></tr></thead><tbody><tr><td>作者</td><td>蚂蚁金服（阿里）</td><td>自主开源（社区项目）</td></tr><tr><td>技术基础</td><td>基于 <a href="https://single-spa.js.org/" target="_blank" rel="noopener noreferrer">single-spa</a></td><td>自研运行时</td></tr><tr><td>维护状态</td><td>稳定成熟，已广泛应用</td><td>活跃更新，功能丰富</td></tr><tr><td>支持框架</td><td>React / Vue / Angular 等</td><td>所有框架，包括原生 HTML</td></tr><tr><td>子应用接入</td><td>registerMicroApps + 配置</td><td>类似 Web Components，自定义标签 <code>&lt;micro-app&gt;</code></td></tr><tr><td>主打特点</td><td>稳定、通用、官方背景</td><td>更灵活、性能更优、更接近浏览器原生</td></tr></tbody></table><hr><h2 id="⚙️-二、核心机制对比" tabindex="-1"><a class="header-anchor" href="#⚙️-二、核心机制对比"><span>⚙️ 二、核心机制对比</span></a></h2><table><thead><tr><th>对比维度</th><th>qiankun</th><th>micro-app</th></tr></thead><tbody><tr><td><strong>运行机制</strong></td><td>基于 single-spa 的生命周期管理</td><td>自研沙箱 + Web Components 封装子应用</td></tr><tr><td><strong>子应用渲染方式</strong></td><td>js 动态加载 + DOM 挂载</td><td>类似 iframe 的标签式加载 <code>&lt;micro-app&gt;</code></td></tr><tr><td><strong>样式隔离</strong></td><td>Shadow DOM（可选）/ CSS 沙箱</td><td>原生 Shadow DOM、严格隔离默认开启</td></tr><tr><td><strong>JS 沙箱</strong></td><td>snapshot 机制（Proxy 模拟）</td><td>更完整，类似 <code>JS 沙箱 + iframe</code> 效果</td></tr><tr><td><strong>资源加载</strong></td><td>依赖 html-entry 插件解析 HTML</td><td>内置 HTML 解析器，更智能</td></tr><tr><td><strong>路由模式</strong></td><td>hash/history，主子共享</td><td>支持独立路由，子应用支持任意模式</td></tr><tr><td><strong>跨框架支持</strong></td><td>较好，但需注册配置</td><td>支持所有框架/静态页面/原生 HTML</td></tr><tr><td><strong>通信方式</strong></td><td><code>props</code> / <code>globalState</code> / 自定义事件</td><td>props + 内置全局通信对象 <code>$microApp</code></td></tr><tr><td><strong>性能表现</strong></td><td>初次加载较快，卸载有开销</td><td>加载快，卸载更彻底（DOM 移除即销毁）</td></tr></tbody></table><hr><h2 id="🚀-三、使用体验对比" tabindex="-1"><a class="header-anchor" href="#🚀-三、使用体验对比"><span>🚀 三、使用体验对比</span></a></h2><table><thead><tr><th>使用对比</th><th>qiankun</th><th>micro-app</th></tr></thead><tbody><tr><td>主应用接入</td><td><code>registerMicroApps([...])</code>，写配置</td><td><code>&lt;micro-app name=&quot;...&quot; url=&quot;...&quot; /&gt;</code> 更直观</td></tr><tr><td>子应用生命周期</td><td>mount/unmount 等</td><td>支持自定义事件如 <code>mounted/unmount</code></td></tr><tr><td>微前端嵌套支持</td><td>支持（需额外配置）</td><td>内建支持微前端嵌套（如 A 子应用再挂 B）</td></tr><tr><td>打包兼容性</td><td>需设置 <code>publicPath</code> / <code>library</code></td><td>更容错，即使是静态站点也能加载</td></tr><tr><td>接入非框架应用</td><td>需封装</td><td>支持纯 HTML 或静态页直接接入</td></tr></tbody></table><hr><h2 id="✅-四、选型建议-重点" tabindex="-1"><a class="header-anchor" href="#✅-四、选型建议-重点"><span>✅ 四、选型建议（重点）</span></a></h2><table><thead><tr><th>场景</th><th>推荐方案</th><th>理由</th></tr></thead><tbody><tr><td>公司已有基于 single-spa 的系统</td><td><strong>qiankun</strong></td><td>成本低、社区成熟</td></tr><tr><td>子应用需要强隔离（样式/JS）</td><td><strong>micro-app</strong></td><td>Shadow DOM 支持更好、更稳定</td></tr><tr><td>子应用不一定使用 Vue/React（如静态页）</td><td><strong>micro-app</strong></td><td>支持所有类型子应用</td></tr><tr><td>新项目追求前沿架构体验</td><td><strong>micro-app</strong></td><td>架构更现代，组件化接入更优雅</td></tr><tr><td>老项目改造、用惯了 qiankun</td><td><strong>qiankun</strong></td><td>成熟可靠，社区支持多</td></tr><tr><td>子应用有嵌套场景</td><td><strong>micro-app</strong></td><td>嵌套支持原生，不需 hack</td></tr></tbody></table><hr><h2 id="📦-五、对比小结" tabindex="-1"><a class="header-anchor" href="#📦-五、对比小结"><span>📦 五、对比小结</span></a></h2><table><thead><tr><th>维度</th><th>qiankun</th><th>micro-app</th></tr></thead><tbody><tr><td>成熟度</td><td>⭐⭐⭐⭐⭐</td><td>⭐⭐⭐⭐</td></tr><tr><td>灵活性</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>性能表现</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>接入门槛</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>未来可拓展性</td><td>⭐⭐⭐</td><td>⭐⭐⭐⭐</td></tr><tr><td>通信机制</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐（更现代）</td></tr><tr><td>样式隔离</td><td>⭐⭐⭐⭐</td><td>⭐⭐⭐⭐⭐（原生）</td></tr></tbody></table><hr><h2 id="🧩-举例说明" tabindex="-1"><a class="header-anchor" href="#🧩-举例说明"><span>🧩 举例说明</span></a></h2><h3 id="✅-qiankun-代码示例" tabindex="-1"><a class="header-anchor" href="#✅-qiankun-代码示例"><span>✅ qiankun 代码示例：</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerMicroApps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;app1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;//localhost:7100&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;#container&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    activeRule</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/app1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-micro-app-使用示例" tabindex="-1"><a class="header-anchor" href="#✅-micro-app-使用示例"><span>✅ micro-app 使用示例：</span></a></h3><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">micro-app</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;app1&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://localhost:7100&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">micro-app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="🎯-最终建议" tabindex="-1"><a class="header-anchor" href="#🎯-最终建议"><span>🎯 最终建议</span></a></h2><table><thead><tr><th>你如果是...</th><th>推荐使用</th></tr></thead><tbody><tr><td>做后台系统、技术偏稳健</td><td><code>qiankun</code></td></tr><tr><td>想做一个灵活、性能更好、支持原生/框架混合系统</td><td><code>micro-app</code></td></tr><tr><td>项目简单、无历史包袱，追求开发体验</td><td><code>micro-app</code></td></tr><tr><td>想快速上线、依赖稳定生态</td><td><code>qiankun</code></td></tr></tbody></table><hr><p><code>qiankun</code> 是基于 <code>single-spa</code> 的微前端框架，它的核心原理围绕<strong>子应用的注册、加载、渲染、隔离与通信</strong>展开。以下是详细的原理分析，帮助你深入理解 <code>qiankun</code> 是如何工作的。</p><hr><h2 id="🧠-一、总体架构原理图" tabindex="-1"><a class="header-anchor" href="#🧠-一、总体架构原理图"><span>🧠 一、总体架构原理图</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>                +-----------------------+</span></span>
<span class="line"><span>                |      主应用（Shell）   |</span></span>
<span class="line"><span>                +-----------------------+</span></span>
<span class="line"><span>                         |</span></span>
<span class="line"><span>       注册子应用（registerMicroApps）</span></span>
<span class="line"><span>                         |</span></span>
<span class="line"><span>         +---------------+--------------+</span></span>
<span class="line"><span>         |                              |</span></span>
<span class="line"><span>  +--------------+             +----------------+</span></span>
<span class="line"><span>  | 子应用 A（React）|             | 子应用 B（Vue） |</span></span>
<span class="line"><span>  +--------------+             +----------------+</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🧩-二、核心原理拆解" tabindex="-1"><a class="header-anchor" href="#🧩-二、核心原理拆解"><span>🧩 二、核心原理拆解</span></a></h2><h3 id="_1️⃣-子应用注册" tabindex="-1"><a class="header-anchor" href="#_1️⃣-子应用注册"><span>1️⃣ 子应用注册</span></a></h3><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">registerMicroApps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;app1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;//localhost:7100&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    container</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;#subapp-container&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    activeRule</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;/app1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>entry</code>：子应用的入口 HTML，qiankun 会解析 HTML，提取资源。</li><li><code>activeRule</code>：当 URL 匹配该规则时，激活子应用。</li><li>主应用通过 <code>start()</code> 启动微前端引擎。</li></ul><hr><h3 id="_2️⃣-路由监听和匹配" tabindex="-1"><a class="header-anchor" href="#_2️⃣-路由监听和匹配"><span>2️⃣ 路由监听和匹配</span></a></h3><ul><li><code>qiankun</code> 内部监听主应用路由变化（支持 hash / history）。</li><li>匹配 <code>activeRule</code>，判断是否需要加载/卸载子应用。</li></ul><hr><h3 id="_3️⃣-html-entry-加载与解析" tabindex="-1"><a class="header-anchor" href="#_3️⃣-html-entry-加载与解析"><span>3️⃣ HTML Entry 加载与解析</span></a></h3><ul><li><p>使用 <a href="https://github.com/kuitos/html-entry" target="_blank" rel="noopener noreferrer">html-entry</a> 插件将子应用的 HTML 入口：</p><ul><li>下载 HTML</li><li>提取其中的 <code>&lt;script&gt;</code> / <code>&lt;link&gt;</code> / <code>&lt;style&gt;</code></li><li>动态加载子应用资源（JS / CSS）</li></ul></li></ul><hr><h3 id="_4️⃣-沙箱机制-js-隔离" tabindex="-1"><a class="header-anchor" href="#_4️⃣-沙箱机制-js-隔离"><span>4️⃣ 沙箱机制（JS 隔离）</span></a></h3><h4 id="🛡-qiankun-的-js-沙箱基于-proxy-实现" tabindex="-1"><a class="header-anchor" href="#🛡-qiankun-的-js-沙箱基于-proxy-实现"><span>🛡 qiankun 的 JS 沙箱基于 Proxy 实现：</span></a></h4><ul><li>每个子应用运行时使用 <code>Proxy(window)</code> 创建子应用自己的作用域。</li><li>通过 snapshot 快照机制隔离变量，避免子应用污染主应用或其他子应用。</li></ul><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> sandboxWindow</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">prop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_5️⃣-样式隔离机制" tabindex="-1"><a class="header-anchor" href="#_5️⃣-样式隔离机制"><span>5️⃣ 样式隔离机制</span></a></h3><ul><li><p>默认支持 <strong>Scoped CSS</strong>（通过添加前缀选择器方式）：</p><ul><li>动态给子应用的 CSS 添加 <code>data-qiankun</code> 等命名空间。</li></ul></li><li><p>也支持开启 Shadow DOM（样式更彻底隔离，但兼容性有限）。</p></li></ul><hr><h3 id="_6️⃣-生命周期钩子" tabindex="-1"><a class="header-anchor" href="#_6️⃣-生命周期钩子"><span>6️⃣ 生命周期钩子</span></a></h3><p>每个子应用有完整的生命周期流程：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  beforeLoad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  beforeMount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  afterMount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  beforeUnmount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  afterUnmount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>开发者可以在这些钩子中执行操作，比如加载动画、全局变量注入等。</li></ul><hr><h3 id="_7️⃣-子应用渲染" tabindex="-1"><a class="header-anchor" href="#_7️⃣-子应用渲染"><span>7️⃣ 子应用渲染</span></a></h3><ul><li>子应用的 DOM 会被挂载到主应用的 container 容器中。</li><li>主应用通过 <code>customElement.innerHTML = html</code> 实现插入。</li></ul><hr><h3 id="_8️⃣-应用间通信机制" tabindex="-1"><a class="header-anchor" href="#_8️⃣-应用间通信机制"><span>8️⃣ 应用间通信机制</span></a></h3><p>qiankun 提供全局状态管理工具 <code>initGlobalState</code>：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> actions</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> initGlobalState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">user</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;admin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onGlobalStateChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">prev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">state</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">prev</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">actions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setGlobalState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">user</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;guest&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可通过 <code>props</code> 传参到子应用。</p><hr><h2 id="✅-三、技术优势" tabindex="-1"><a class="header-anchor" href="#✅-三、技术优势"><span>✅ 三、技术优势</span></a></h2><table><thead><tr><th>特性</th><th>描述</th></tr></thead><tbody><tr><td>基于 single-spa</td><td>成熟稳定的微前端架构基础</td></tr><tr><td>样式与 JS 隔离</td><td>避免子应用相互污染</td></tr><tr><td>动态加载资源</td><td>子应用按需加载、懒加载</td></tr><tr><td>独立部署</td><td>子应用可独立构建与上线</td></tr><tr><td>生命周期管理</td><td>主控能力强、扩展性好</td></tr></tbody></table><hr><h2 id="⚠️-四、常见挑战" tabindex="-1"><a class="header-anchor" href="#⚠️-四、常见挑战"><span>⚠️ 四、常见挑战</span></a></h2><table><thead><tr><th>问题</th><th>说明</th></tr></thead><tbody><tr><td>样式冲突</td><td>Shadow DOM 开启后较难调试</td></tr><tr><td>JS 沙箱性能</td><td>Proxy 有一定性能开销</td></tr><tr><td>SEO 支持较弱</td><td>子应用是异步加载，不利于爬虫</td></tr><tr><td>依赖冗余</td><td>各子应用可能引入重复依赖（React、Vue等）</td></tr></tbody></table><hr><h2 id="🏁-总结一句话" tabindex="-1"><a class="header-anchor" href="#🏁-总结一句话"><span>🏁 总结一句话</span></a></h2><blockquote><p><strong>qiankun 的原理是：基于 single-spa 的路由劫持与生命周期管理，结合 Proxy 实现的沙箱机制、html-entry 的动态 HTML 资源加载、Scoped CSS 隔离样式，实现多子应用的灵活挂载与切换。</strong></p></blockquote><p><code>micro-app</code> 是一个现代微前端框架，设计理念是更加轻量、现代、低侵入性。相比于 <code>qiankun</code>，它<strong>不依赖 <code>single-spa</code></strong>，从零实现了完整的微前端生命周期、沙箱和样式隔离机制，支持所有主流框架（Vue / React / Angular / 原生 JS 等）。</p><hr><h2 id="🧠-一句话原理概述" tabindex="-1"><a class="header-anchor" href="#🧠-一句话原理概述"><span>🧠 一句话原理概述</span></a></h2><blockquote><p><code>micro-app</code> 通过自定义元素（Web Components）、沙箱、样式隔离和资源拦截等机制，实现子应用的动态加载、渲染与隔离，并提供主从通信能力。</p></blockquote><hr><h2 id="⚙️-二、核心原理模块详解" tabindex="-1"><a class="header-anchor" href="#⚙️-二、核心原理模块详解"><span>⚙️ 二、核心原理模块详解</span></a></h2><h3 id="_1️⃣-web-component-容器机制" tabindex="-1"><a class="header-anchor" href="#_1️⃣-web-component-容器机制"><span>1️⃣ Web Component 容器机制</span></a></h3><p>每个子应用通过 <code>&lt;micro-app name=&quot;xxx&quot; url=&quot;xxx&quot; /&gt;</code> 来加载：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">micro-app</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vue-app&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://localhost:3001/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">micro-app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>micro-app</code> 是一个自定义组件（<code>customElements.define</code>）。</li><li>每个 <code>&lt;micro-app&gt;</code> 元素内部维护自己的生命周期、DOM 树等。</li></ul><p>👉 这是区别于 <code>qiankun</code> 的核心设计点之一（qiankun 是通过 DOM 容器 + HTML 解析器）。</p><hr><h3 id="_2️⃣-资源拦截和-html-解析" tabindex="-1"><a class="header-anchor" href="#_2️⃣-资源拦截和-html-解析"><span>2️⃣ 资源拦截和 HTML 解析</span></a></h3><p>当设置了 <code>url</code> 后，框架会：</p><ol><li><strong>拦截并 fetch 子应用 HTML</strong>。</li><li>解析出 <code>script</code>、<code>style</code>、<code>link</code> 标签。</li><li>自动重写路径（相对路径 -&gt; 绝对路径）。</li><li>动态执行 JS 代码、插入样式。</li></ol><hr><h3 id="_3️⃣-沙箱机制-js-作用域隔离" tabindex="-1"><a class="header-anchor" href="#_3️⃣-沙箱机制-js-作用域隔离"><span>3️⃣ 沙箱机制（JS 作用域隔离）</span></a></h3><p>支持三种沙箱类型：</p><table><thead><tr><th>类型</th><th>实现方式</th><th>特点</th></tr></thead><tbody><tr><td><code>Proxy</code> 沙箱</td><td>使用 Proxy 包装 <code>window</code></td><td>强隔离</td></tr><tr><td><code>Scoped eval</code></td><td>作用域包裹 eval</td><td>简单兼容性好</td></tr><tr><td><code>umd</code> 模式</td><td>直接挂在真实 window 上</td><td>兼容老项目</td></tr></tbody></table><p>默认使用 Proxy 沙箱，和 qiankun 原理类似：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> sandbox</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Proxy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* ... */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* ... */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4️⃣-样式隔离机制" tabindex="-1"><a class="header-anchor" href="#_4️⃣-样式隔离机制"><span>4️⃣ 样式隔离机制</span></a></h3><p>两种策略：</p><ul><li>✅ <code>Scoped CSS</code>：通过添加前缀（如 <code>[micro-app=&#39;vue-app&#39;] .btn</code>）限制样式作用域。</li><li>✅ <code>Shadow DOM</code>（可选）：用于更彻底的样式隔离。</li></ul><hr><h3 id="_5️⃣-生命周期钩子" tabindex="-1"><a class="header-anchor" href="#_5️⃣-生命周期钩子"><span>5️⃣ 生命周期钩子</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">micro-app</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">  name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;react-app&quot;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">  url</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://localhost:3002/&quot;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  @mounted=&quot;onMounted&quot;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">  @unmount=&quot;onUnmount&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">micro-app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以监听：</p><ul><li><code>created</code></li><li><code>beforemount</code></li><li><code>mounted</code></li><li><code>unmount</code></li><li><code>error</code></li></ul><hr><h3 id="_6️⃣-子应用生命周期和激活流程" tabindex="-1"><a class="header-anchor" href="#_6️⃣-子应用生命周期和激活流程"><span>6️⃣ 子应用生命周期和激活流程</span></a></h3><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 加载流程（框架内部）：</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 创建</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> micro</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 元素</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fetch</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> HTML</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 解析资源</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 加载</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> JS</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 执行</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> bootstrap</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> mount</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6.</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> 绑定事件通信</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子应用支持 export 出生命周期函数：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子应用入口</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  ReactDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">render</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">App</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> unmount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  ReactDOM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unmountComponentAtNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_7️⃣-应用间通信机制" tabindex="-1"><a class="header-anchor" href="#_7️⃣-应用间通信机制"><span>7️⃣ 应用间通信机制</span></a></h3><p>类似 qiankun，micro-app 也提供 <code>data</code> 和 <code>dispatch</code> 通信：</p><h4 id="父应用传数据给子应用" tabindex="-1"><a class="header-anchor" href="#父应用传数据给子应用"><span>父应用传数据给子应用：</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">micro-app</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;vue-app&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;...&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{ user: &#39;jack&#39; }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">micro-app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="子应用监听" tabindex="-1"><a class="header-anchor" href="#子应用监听"><span>子应用监听：</span></a></h4><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">microApp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addDataListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;来自主应用的数据：&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-三、技术优势-1" tabindex="-1"><a class="header-anchor" href="#✅-三、技术优势-1"><span>✅ 三、技术优势</span></a></h2><table><thead><tr><th>特性</th><th>优势</th></tr></thead><tbody><tr><td>自定义元素实现</td><td>更符合 Web 标准、可组合</td></tr><tr><td>多沙箱策略</td><td>更灵活（兼容低端浏览器）</td></tr><tr><td>支持 JSX / Vue 模板</td><td>可在 Vue/React 中直接用 <code>&lt;micro-app&gt;</code></td></tr><tr><td>独立打包</td><td>子应用完全独立部署</td></tr><tr><td>性能更轻</td><td>没有额外依赖（如 single-spa）</td></tr></tbody></table><hr><h2 id="⚖️-四、与-qiankun-对比" tabindex="-1"><a class="header-anchor" href="#⚖️-四、与-qiankun-对比"><span>⚖️ 四、与 <code>qiankun</code> 对比</span></a></h2><table><thead><tr><th>对比点</th><th>qiankun</th><th>micro-app</th></tr></thead><tbody><tr><td>底层实现</td><td>基于 single-spa</td><td>完全自研、基于 WebComponent</td></tr><tr><td>沙箱机制</td><td>Proxy</td><td>Proxy + ScopedEval + umd</td></tr><tr><td>HTML 解析</td><td>html-entry</td><td>自研解析器</td></tr><tr><td>子应用容器</td><td>container + innerHTML</td><td>WebComponent 容器</td></tr><tr><td>路由兼容</td><td>需要配合 activeRule</td><td>更强的嵌套和动态性支持</td></tr><tr><td>生态</td><td>成熟，阿里系广泛使用</td><td>新兴，社区活跃</td></tr></tbody></table><hr><h2 id="🏁-五、总结" tabindex="-1"><a class="header-anchor" href="#🏁-五、总结"><span>🏁 五、总结</span></a></h2><blockquote><p><strong><code>micro-app</code> 是一个基于 Web Components 的微前端解决方案，核心通过 DOM 拦截、沙箱隔离、Scoped 样式、多生命周期钩子来实现主从应用的解耦加载和独立运行。它更轻、更灵活、更现代化，适合新项目或希望使用 Web 标准构建微前端的场景。</strong></p></blockquote><hr><p><strong>Web Components</strong> 是一套由浏览器原生支持的技术规范，允许你创建<strong>可复用、自封装</strong>的前端组件。它可以让你像使用原生 HTML 元素一样使用自定义组件，如：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">user-card</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;张三&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> avatar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;avatar.png&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">user-card</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这就像是你自己定义了一个新的 HTML 标签。</p><hr><h2 id="🧩-web-components-的三大核心技术" tabindex="-1"><a class="header-anchor" href="#🧩-web-components-的三大核心技术"><span>🧩 Web Components 的三大核心技术</span></a></h2><table><thead><tr><th>技术</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>1. <strong>Custom Elements</strong></td><td>定义自定义 HTML 标签</td><td><code>customElements.define(&#39;user-card&#39;, ...)</code></td></tr><tr><td>2. <strong>Shadow DOM</strong></td><td>组件内部样式、DOM 隔离</td><td><code>this.attachShadow({ mode: &#39;open&#39; })</code></td></tr><tr><td>3. <strong>HTML Templates</strong></td><td>模板复用，不立即渲染</td><td><code>&lt;template&gt;...&lt;/template&gt;</code></td></tr></tbody></table><hr><h3 id="_1️⃣-custom-elements-自定义元素" tabindex="-1"><a class="header-anchor" href="#_1️⃣-custom-elements-自定义元素"><span>1️⃣ Custom Elements（自定义元素）</span></a></h3><p>用来自定义新的 HTML 标签：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyElement</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HTMLElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  connectedCallback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">innerHTML</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`&lt;p&gt;Hello, I&#39;m a custom element!&lt;/p&gt;\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">customElements</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">define</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;my-element&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">MyElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">my-element</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="_2️⃣-shadow-dom-影子-dom" tabindex="-1"><a class="header-anchor" href="#_2️⃣-shadow-dom-影子-dom"><span>2️⃣ Shadow DOM（影子 DOM）</span></a></h3><p>组件内部的 DOM 与外部完全隔离，样式互不影响：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyElement</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HTMLElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  constructor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">    super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> shadow</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">attachShadow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">mode</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;open&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    shadow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">innerHTML</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &lt;style&gt; p { color: red; } &lt;/style&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      &lt;p&gt;Hello in Shadow DOM&lt;/p&gt;</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    \`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_3️⃣-html-templates-模板" tabindex="-1"><a class="header-anchor" href="#_3️⃣-html-templates-模板"><span>3️⃣ HTML Templates（模板）</span></a></h3><p>用于预定义模板，页面加载时不会立即渲染：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user-template&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { color: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">green</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; }&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Hello, Template&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> template</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;user-template&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> clone</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cloneNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  document</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">appendChild</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">script</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="✅-web-components-的优点" tabindex="-1"><a class="header-anchor" href="#✅-web-components-的优点"><span>✅ Web Components 的优点</span></a></h2><ul><li>✅ 原生支持，不依赖框架</li><li>✅ 样式和 DOM 隔离（通过 Shadow DOM）</li><li>✅ 可重用、自封装、模块化</li><li>✅ 可与任何框架混用（Vue / React / Angular）</li></ul><hr><h2 id="🤔-适合什么场景" tabindex="-1"><a class="header-anchor" href="#🤔-适合什么场景"><span>🤔 适合什么场景？</span></a></h2><ul><li>微前端架构（如 micro-app、single-spa）</li><li>企业 UI 组件库（多个框架共用）</li><li>第三方 SDK、嵌入式组件</li><li>与框架无关的底层基础组件</li></ul><hr>`,152)]))}const p=s(e,[["render",l]]),r=JSON.parse('{"path":"/posts/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AF.html","title":"微前端架构","lang":"zh-CN","frontmatter":{"title":"微前端架构","tags":["微前端"],"description":"文章推荐 micro-app 和 qiankun 都是流行的微前端框架，它们的目标一致：实现多个子应用的独立开发、独立部署、统一接入。但它们在架构设计、实现方式、兼容性、使用体验等方面存在明显差异。 下面是全面对比，供你做技术选型时参考： 🧱 一、基本信息对比 ⚙️ 二、核心机制对比 🚀 三、使用体验对比 ✅ 四、选型建议（重点） 📦 五、对比小...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/%E5%BE%AE%E5%89%8D%E7%AB%AF/%E5%BE%AE%E5%89%8D%E7%AB%AF.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"微前端架构"}],["meta",{"property":"og:description","content":"文章推荐 micro-app 和 qiankun 都是流行的微前端框架，它们的目标一致：实现多个子应用的独立开发、独立部署、统一接入。但它们在架构设计、实现方式、兼容性、使用体验等方面存在明显差异。 下面是全面对比，供你做技术选型时参考： 🧱 一、基本信息对比 ⚙️ 二、核心机制对比 🚀 三、使用体验对比 ✅ 四、选型建议（重点） 📦 五、对比小..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-04T12:00:27.000Z"}],["meta",{"property":"article:tag","content":"微前端"}],["meta",{"property":"article:modified_time","content":"2025-08-04T12:00:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微前端架构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-04T12:00:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"🧱 一、基本信息对比","slug":"🧱-一、基本信息对比","link":"#🧱-一、基本信息对比","children":[]},{"level":2,"title":"⚙️ 二、核心机制对比","slug":"⚙️-二、核心机制对比","link":"#⚙️-二、核心机制对比","children":[]},{"level":2,"title":"🚀 三、使用体验对比","slug":"🚀-三、使用体验对比","link":"#🚀-三、使用体验对比","children":[]},{"level":2,"title":"✅ 四、选型建议（重点）","slug":"✅-四、选型建议-重点","link":"#✅-四、选型建议-重点","children":[]},{"level":2,"title":"📦 五、对比小结","slug":"📦-五、对比小结","link":"#📦-五、对比小结","children":[]},{"level":2,"title":"🧩 举例说明","slug":"🧩-举例说明","link":"#🧩-举例说明","children":[{"level":3,"title":"✅ qiankun 代码示例：","slug":"✅-qiankun-代码示例","link":"#✅-qiankun-代码示例","children":[]},{"level":3,"title":"✅ micro-app 使用示例：","slug":"✅-micro-app-使用示例","link":"#✅-micro-app-使用示例","children":[]}]},{"level":2,"title":"🎯 最终建议","slug":"🎯-最终建议","link":"#🎯-最终建议","children":[]},{"level":2,"title":"🧠 一、总体架构原理图","slug":"🧠-一、总体架构原理图","link":"#🧠-一、总体架构原理图","children":[]},{"level":2,"title":"🧩 二、核心原理拆解","slug":"🧩-二、核心原理拆解","link":"#🧩-二、核心原理拆解","children":[{"level":3,"title":"1️⃣ 子应用注册","slug":"_1️⃣-子应用注册","link":"#_1️⃣-子应用注册","children":[]},{"level":3,"title":"2️⃣ 路由监听和匹配","slug":"_2️⃣-路由监听和匹配","link":"#_2️⃣-路由监听和匹配","children":[]},{"level":3,"title":"3️⃣ HTML Entry 加载与解析","slug":"_3️⃣-html-entry-加载与解析","link":"#_3️⃣-html-entry-加载与解析","children":[]},{"level":3,"title":"4️⃣ 沙箱机制（JS 隔离）","slug":"_4️⃣-沙箱机制-js-隔离","link":"#_4️⃣-沙箱机制-js-隔离","children":[]},{"level":3,"title":"5️⃣ 样式隔离机制","slug":"_5️⃣-样式隔离机制","link":"#_5️⃣-样式隔离机制","children":[]},{"level":3,"title":"6️⃣ 生命周期钩子","slug":"_6️⃣-生命周期钩子","link":"#_6️⃣-生命周期钩子","children":[]},{"level":3,"title":"7️⃣ 子应用渲染","slug":"_7️⃣-子应用渲染","link":"#_7️⃣-子应用渲染","children":[]},{"level":3,"title":"8️⃣ 应用间通信机制","slug":"_8️⃣-应用间通信机制","link":"#_8️⃣-应用间通信机制","children":[]}]},{"level":2,"title":"✅ 三、技术优势","slug":"✅-三、技术优势","link":"#✅-三、技术优势","children":[]},{"level":2,"title":"⚠️ 四、常见挑战","slug":"⚠️-四、常见挑战","link":"#⚠️-四、常见挑战","children":[]},{"level":2,"title":"🏁 总结一句话","slug":"🏁-总结一句话","link":"#🏁-总结一句话","children":[]},{"level":2,"title":"🧠 一句话原理概述","slug":"🧠-一句话原理概述","link":"#🧠-一句话原理概述","children":[]},{"level":2,"title":"⚙️ 二、核心原理模块详解","slug":"⚙️-二、核心原理模块详解","link":"#⚙️-二、核心原理模块详解","children":[{"level":3,"title":"1️⃣ Web Component 容器机制","slug":"_1️⃣-web-component-容器机制","link":"#_1️⃣-web-component-容器机制","children":[]},{"level":3,"title":"2️⃣ 资源拦截和 HTML 解析","slug":"_2️⃣-资源拦截和-html-解析","link":"#_2️⃣-资源拦截和-html-解析","children":[]},{"level":3,"title":"3️⃣ 沙箱机制（JS 作用域隔离）","slug":"_3️⃣-沙箱机制-js-作用域隔离","link":"#_3️⃣-沙箱机制-js-作用域隔离","children":[]},{"level":3,"title":"4️⃣ 样式隔离机制","slug":"_4️⃣-样式隔离机制","link":"#_4️⃣-样式隔离机制","children":[]},{"level":3,"title":"5️⃣ 生命周期钩子","slug":"_5️⃣-生命周期钩子","link":"#_5️⃣-生命周期钩子","children":[]},{"level":3,"title":"6️⃣ 子应用生命周期和激活流程","slug":"_6️⃣-子应用生命周期和激活流程","link":"#_6️⃣-子应用生命周期和激活流程","children":[]},{"level":3,"title":"7️⃣ 应用间通信机制","slug":"_7️⃣-应用间通信机制","link":"#_7️⃣-应用间通信机制","children":[]}]},{"level":2,"title":"✅ 三、技术优势","slug":"✅-三、技术优势-1","link":"#✅-三、技术优势-1","children":[]},{"level":2,"title":"⚖️ 四、与 qiankun 对比","slug":"⚖️-四、与-qiankun-对比","link":"#⚖️-四、与-qiankun-对比","children":[]},{"level":2,"title":"🏁 五、总结","slug":"🏁-五、总结","link":"#🏁-五、总结","children":[]},{"level":2,"title":"🧩 Web Components 的三大核心技术","slug":"🧩-web-components-的三大核心技术","link":"#🧩-web-components-的三大核心技术","children":[{"level":3,"title":"1️⃣ Custom Elements（自定义元素）","slug":"_1️⃣-custom-elements-自定义元素","link":"#_1️⃣-custom-elements-自定义元素","children":[]},{"level":3,"title":"2️⃣ Shadow DOM（影子 DOM）","slug":"_2️⃣-shadow-dom-影子-dom","link":"#_2️⃣-shadow-dom-影子-dom","children":[]},{"level":3,"title":"3️⃣ HTML Templates（模板）","slug":"_3️⃣-html-templates-模板","link":"#_3️⃣-html-templates-模板","children":[]}]},{"level":2,"title":"✅ Web Components 的优点","slug":"✅-web-components-的优点","link":"#✅-web-components-的优点","children":[]},{"level":2,"title":"🤔 适合什么场景？","slug":"🤔-适合什么场景","link":"#🤔-适合什么场景","children":[]}],"git":{"createdTime":1747720015000,"updatedTime":1754308827000,"contributors":[{"name":"zy","username":"zy","email":"891374900@qq.com","commits":3,"url":"https://github.com/zy"},{"name":"zouyu","username":"zouyu","email":"891374900@qq.com","commits":1,"url":"https://github.com/zouyu"}]},"readingTime":{"minutes":9.77,"words":2932},"filePathRelative":"posts/微前端/微前端.md","localizedDate":"2025年5月20日","excerpt":"<ul>\\n<li><a href=\\"https://zhuanlan.zhihu.com/p/458979302\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">文章推荐</a></li>\\n</ul>\\n<p><code>micro-app</code> 和 <code>qiankun</code> 都是流行的微前端框架，它们的目标一致：<strong>实现多个子应用的独立开发、独立部署、统一接入</strong>。但它们在架构设计、实现方式、兼容性、使用体验等方面存在明显差异。</p>\\n<p>下面是全面对比，供你做技术选型时参考：</p>\\n<hr>\\n<h2>🧱 一、基本信息对比</h2>","autoDesc":true}');export{p as comp,r as data};
