import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as n}from"./app-D4yN_ylH.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<hr><h1 id="🧠-深入-vue-3-dom-diff-从-h-函数到-diff-执行全过程" tabindex="-1"><a class="header-anchor" href="#🧠-深入-vue-3-dom-diff-从-h-函数到-diff-执行全过程"><span>🧠 深入 Vue 3 DOM-Diff：从 <code>h()</code> 函数到 Diff 执行全过程</span></a></h1><h2 id="✳️-一、什么是-h-函数" tabindex="-1"><a class="header-anchor" href="#✳️-一、什么是-h-函数"><span>✳️ 一、什么是 <code>h()</code> 函数？</span></a></h2><p>Vue 3 中的 <code>h()</code> 是用来手动创建 <strong>VNode（虚拟 DOM）</strong> 的函数，它的定义大致是这样的：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#0184BC;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>它最终返回的是一个描述这个 DOM 节点或组件的 JavaScript 对象（VNode）：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: { </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;span&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;hello&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Vue 的编译器会把模板 <code>&lt;div&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt;</code> 转换成这种结构。</p><hr><h2 id="📦-二、vnode-是什么样子的" tabindex="-1"><a class="header-anchor" href="#📦-二、vnode-是什么样子的"><span>📦 二、VNode 是什么样子的？</span></a></h2><p>每个 VNode 本质上是一个普通的 JS 对象，Vue 3 用 <code>createVNode()</code> 创建这个结构。一个典型 VNode 会包含：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,               </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 节点类型，如 &#39;div&#39;、组件对象、Symbol(Text) 等</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,              </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 属性和事件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子节点数组、文本、null 等</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  shapeFlag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 位掩码标记 vnode 类型（元素/组件/文本）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                 </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 对应的真实 DOM 节点（patch 后赋值）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,                </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 用于 Diff 的 key</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="🔄-三、patch-函数-vnode-对比入口" tabindex="-1"><a class="header-anchor" href="#🔄-三、patch-函数-vnode-对比入口"><span>🔄 三、patch 函数：VNode 对比入口</span></a></h2><p>每次响应式数据变化后，Vue 会重新执行 <code>render()</code> 函数，返回新的 VNode 树，然后执行 <code>patch(n1, n2, container)</code> 来对比新旧 VNode。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">patch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">oldVNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">newVNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="patch-中的主要逻辑" tabindex="-1"><a class="header-anchor" href="#patch-中的主要逻辑"><span>patch 中的主要逻辑：</span></a></h3><ol><li>如果 <code>oldVNode == null</code>：说明是首次挂载，走挂载流程（mount）。</li><li>如果 <code>oldVNode.type !== newVNode.type</code>：直接替换。</li><li>否则： <ul><li>如果是元素节点：调用 <code>patchElement</code></li><li>如果是组件：调用 <code>patchComponent</code></li><li>如果是文本：<code>patchText</code></li></ul></li></ol><hr><h2 id="🏗️-四、patchelement-节点一致时-对比属性与-children" tabindex="-1"><a class="header-anchor" href="#🏗️-四、patchelement-节点一致时-对比属性与-children"><span>🏗️ 四、patchElement：节点一致时，对比属性与 children</span></a></h2><p>当 <code>type</code> 一致时，说明两个节点是“同类型”，可以复用，进入更深层的 diff：</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> patchElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">n1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">n2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> el</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">n2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">el</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> n1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  patchProps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">n1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">n2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  patchChildren</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">n2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">el</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="✅-patchprops" tabindex="-1"><a class="header-anchor" href="#✅-patchprops"><span>✅ patchProps</span></a></h3><p>对比旧、新节点的属性（<code>props</code>），找出修改点并更新 DOM 属性或事件。</p><ul><li>删除旧的不存在的新属性</li><li>添加新的属性</li><li>修改变更的属性</li></ul><hr><h2 id="👶-五、patchchildren-子节点对比的核心场所" tabindex="-1"><a class="header-anchor" href="#👶-五、patchchildren-子节点对比的核心场所"><span>👶 五、patchChildren：子节点对比的核心场所</span></a></h2><p>这是你最关心的部分：Vue 是 <strong>先比较节点本身（type、props）</strong>，再对比它的子节点（children）。</p><p>根据 <code>children</code> 的类型，Vue 会采取不同策略：</p><table><thead><tr><th>类型</th><th>策略说明</th></tr></thead><tbody><tr><td>文本节点</td><td>判断是否相同，不同则更新文本</td></tr><tr><td>数组</td><td>调用 <code>patchKeyedChildren()</code></td></tr><tr><td>null 或空</td><td>清除旧子节点</td></tr></tbody></table><hr><h2 id="🚀-六、patchkeyedchildren-精细化的数组-diff" tabindex="-1"><a class="header-anchor" href="#🚀-六、patchkeyedchildren-精细化的数组-diff"><span>🚀 六、patchKeyedChildren：精细化的数组 Diff</span></a></h2><p>这个函数是 Vue 3 的 diff 核心，它采用以下策略：</p><ol><li><p><strong>前后对比（head-tail 双指针）</strong></p><ul><li>快速跳过前后相同的部分</li></ul></li><li><p><strong>找出新增/删除的子节点</strong></p></li><li><p><strong>处理中间乱序的部分</strong></p><ul><li>构建 <code>Map&lt;key, index&gt;</code> 来查找新节点位置</li><li>标记可以复用的节点</li><li>使用 <strong>最长递增子序列（LIS）</strong> 优化节点移动次数</li></ul></li></ol><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> increasingNewIndexSequence</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getSequence</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">newIndexToOldIndexMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="🔩-七、vnode-如何关联真实-dom" tabindex="-1"><a class="header-anchor" href="#🔩-七、vnode-如何关联真实-dom"><span>🔩 七、VNode 如何关联真实 DOM？</span></a></h2><p><code>vnode.el = dom</code>：VNode 中会存储它对应的真实 DOM 引用。首次挂载时，Vue 会通过 <code>createElement(type)</code> 创建，并挂载到 DOM。</p><p>而在 patch 过程中，复用节点时就可以用旧的 DOM，不需要重复创建。</p><hr><h2 id="🧩-总结流程图-逻辑顺序" tabindex="-1"><a class="header-anchor" href="#🧩-总结流程图-逻辑顺序"><span>🧩 总结流程图（逻辑顺序）：</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>响应式更新触发</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>执行 render() 返回新 VNode</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>patch(oldVNode, newVNode)</span></span>
<span class="line"><span>    ↓</span></span>
<span class="line"><span>  类型不同？→ 替换整个 DOM</span></span>
<span class="line"><span>  类型相同？→ patchElement</span></span>
<span class="line"><span>                       ↓</span></span>
<span class="line"><span>                 patchProps / patchChildren</span></span>
<span class="line"><span>                                   ↓</span></span>
<span class="line"><span>                          patchKeyedChildren（Diff）</span></span>
<span class="line"><span>                                   ↓</span></span>
<span class="line"><span>                             最小 DOM 操作更新</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="📌-面试补充建议" tabindex="-1"><a class="header-anchor" href="#📌-面试补充建议"><span>📌 面试补充建议：</span></a></h2><ul><li>Vue 是“<strong>先比自己，再比儿子</strong>” —— 先对比当前节点的 type、props，再进入 children。</li><li>Vue 3 的 Diff 策略相比 Vue 2 更“智能”：基于 PatchFlags、Block Tree、静态提升等优化，减少不必要的对比。</li><li>给列表元素加 <code>key</code> 是必须的，否则无法精确追踪节点。</li></ul><hr><p>如果你需要我带你过源码具体函数（比如 <code>patchKeyedChildren</code> 的 <code>getSequence</code>）或者写一个小型可视化示意图告诉你整个流程，我也可以继续扩展！</p><p>需要源码级图解版吗？还是你更想看实际 DOM 更新的动画？😎</p>`,48)]))}const k=s(l,[["render",t]]),r=JSON.parse('{"path":"/posts/vue/vue3/dom-diff.html","title":"Vue 3 dom-diff","lang":"zh-CN","frontmatter":{"title":"Vue 3 dom-diff","tags":["vue3"],"description":"🧠 深入 Vue 3 DOM-Diff：从 h() 函数到 Diff 执行全过程 ✳️ 一、什么是 h() 函数？ Vue 3 中的 h() 是用来手动创建 VNode（虚拟 DOM） 的函数，它的定义大致是这样的： 它最终返回的是一个描述这个 DOM 节点或组件的 JavaScript 对象（VNode）： Vue 的编译器会把模板 <div><s...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/vue/vue3/dom-diff.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"Vue 3 dom-diff"}],["meta",{"property":"og:description","content":"🧠 深入 Vue 3 DOM-Diff：从 h() 函数到 Diff 执行全过程 ✳️ 一、什么是 h() 函数？ Vue 3 中的 h() 是用来手动创建 VNode（虚拟 DOM） 的函数，它的定义大致是这样的： 它最终返回的是一个描述这个 DOM 节点或组件的 JavaScript 对象（VNode）： Vue 的编译器会把模板 <div><s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-20T07:48:26.000Z"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2025-05-20T07:48:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue 3 dom-diff\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-20T07:48:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"✳️ 一、什么是 h() 函数？","slug":"✳️-一、什么是-h-函数","link":"#✳️-一、什么是-h-函数","children":[]},{"level":2,"title":"📦 二、VNode 是什么样子的？","slug":"📦-二、vnode-是什么样子的","link":"#📦-二、vnode-是什么样子的","children":[]},{"level":2,"title":"🔄 三、patch 函数：VNode 对比入口","slug":"🔄-三、patch-函数-vnode-对比入口","link":"#🔄-三、patch-函数-vnode-对比入口","children":[{"level":3,"title":"patch 中的主要逻辑：","slug":"patch-中的主要逻辑","link":"#patch-中的主要逻辑","children":[]}]},{"level":2,"title":"🏗️ 四、patchElement：节点一致时，对比属性与 children","slug":"🏗️-四、patchelement-节点一致时-对比属性与-children","link":"#🏗️-四、patchelement-节点一致时-对比属性与-children","children":[{"level":3,"title":"✅ patchProps","slug":"✅-patchprops","link":"#✅-patchprops","children":[]}]},{"level":2,"title":"👶 五、patchChildren：子节点对比的核心场所","slug":"👶-五、patchchildren-子节点对比的核心场所","link":"#👶-五、patchchildren-子节点对比的核心场所","children":[]},{"level":2,"title":"🚀 六、patchKeyedChildren：精细化的数组 Diff","slug":"🚀-六、patchkeyedchildren-精细化的数组-diff","link":"#🚀-六、patchkeyedchildren-精细化的数组-diff","children":[]},{"level":2,"title":"🔩 七、VNode 如何关联真实 DOM？","slug":"🔩-七、vnode-如何关联真实-dom","link":"#🔩-七、vnode-如何关联真实-dom","children":[]},{"level":2,"title":"🧩 总结流程图（逻辑顺序）：","slug":"🧩-总结流程图-逻辑顺序","link":"#🧩-总结流程图-逻辑顺序","children":[]},{"level":2,"title":"📌 面试补充建议：","slug":"📌-面试补充建议","link":"#📌-面试补充建议","children":[]}],"git":{"createdTime":1745573689000,"updatedTime":1747727306000,"contributors":[{"name":"zy","username":"zy","email":"891374900@qq.com","commits":4,"url":"https://github.com/zy"},{"name":"zouyu","username":"zouyu","email":"891374900@qq.com","commits":1,"url":"https://github.com/zouyu"}]},"readingTime":{"minutes":3.13,"words":938},"filePathRelative":"posts/vue/vue3/dom-diff.md","localizedDate":"2025年4月25日","excerpt":"<hr>\\n<h1>🧠 深入 Vue 3 DOM-Diff：从 <code>h()</code> 函数到 Diff 执行全过程</h1>\\n<h2>✳️ 一、什么是 <code>h()</code> 函数？</h2>\\n<p>Vue 3 中的 <code>h()</code> 是用来手动创建 <strong>VNode（虚拟 DOM）</strong> 的函数，它的定义大致是这样的：</p>\\n<div class=\\"language-ts line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"ts\\" data-title=\\"ts\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">h</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">type</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">props</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#C678DD\\">?</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">children</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#C678DD\\">?</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,r as data};
