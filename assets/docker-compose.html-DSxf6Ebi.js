import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as o,o as t}from"./app-D4yN_ylH.js";const n={};function a(l,e){return t(),i("div",null,e[0]||(e[0]=[o(`<hr><h2 id="docker-compose-是什么" tabindex="-1"><a class="header-anchor" href="#docker-compose-是什么"><span>Docker Compose 是什么？</span></a></h2><ul><li>它允许你用一个 YAML 格式的配置文件（通常叫 <code>docker-compose.yml</code>）来定义多个 Docker 容器的服务、网络和存储卷等。</li><li>你只需一条命令，就能启动、停止、重启整个多容器应用。</li><li>它帮你把一堆相关的容器服务（比如前端、后端、数据库、缓存等）组织起来，方便一起管理。</li></ul><hr><h2 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能"><span>主要功能</span></a></h2><ul><li><strong>定义多个服务</strong>：每个服务对应一个 Docker 容器，比如 Web 服务、数据库服务、缓存服务等。</li><li><strong>服务间网络</strong>：自动创建网络，让服务之间可以用名字互相访问。</li><li><strong>依赖管理</strong>：指定服务启动顺序，确保先启动数据库，再启动后端。</li><li><strong>环境变量和配置</strong>：为每个服务设置环境变量、端口映射、挂载卷等。</li><li><strong>一键启动和停止</strong>：用命令 <code>docker-compose up</code> 启动所有服务，用 <code>docker-compose down</code> 停止并清理。</li></ul><hr><h2 id="为什么要用-docker-compose" tabindex="-1"><a class="header-anchor" href="#为什么要用-docker-compose"><span>为什么要用 Docker Compose？</span></a></h2><ul><li><strong>简化多容器应用管理</strong>，不用手动一条条运行容器命令。</li><li><strong>可复用的配置文件</strong>，团队成员都用同一个 <code>docker-compose.yml</code>，环境统一。</li><li><strong>方便本地开发和测试</strong>，模拟生产环境的多个服务。</li><li><strong>支持复杂的依赖关系和网络设置</strong>。</li></ul><hr><h2 id="一个简单的-docker-compose-yml-示例" tabindex="-1"><a class="header-anchor" href="#一个简单的-docker-compose-yml-示例"><span>一个简单的 <code>docker-compose.yml</code> 示例</span></a></h2><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" data-title="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  web</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    ports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      - </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    image</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">mysql</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    environment</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">example</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">docker-compose</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>就会启动一个 nginx 容器和一个 mysql 容器。</p><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><table><thead><tr><th>关键词</th><th>解释</th></tr></thead><tbody><tr><td>多容器编排</td><td>管理和运行多个 Docker 容器</td></tr><tr><td>YAML 配置</td><td>通过 <code>docker-compose.yml</code> 文件定义服务</td></tr><tr><td>一键操作</td><td><code>docker-compose up/down</code> 启动或关闭所有服务</td></tr></tbody></table><hr><h2 id="相关问题解决" tabindex="-1"><a class="header-anchor" href="#相关问题解决"><span>相关问题解决</span></a></h2>`,20)]))}const c=s(n,[["render",a]]),p=JSON.parse('{"path":"/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/docker/docker-compose.html","title":"Docker Compose","lang":"zh-CN","frontmatter":{"title":"Docker Compose","tags":["docker"],"description":"Docker Compose 是什么？ 它允许你用一个 YAML 格式的配置文件（通常叫 docker-compose.yml）来定义多个 Docker 容器的服务、网络和存储卷等。 你只需一条命令，就能启动、停止、重启整个多容器应用。 它帮你把一堆相关的容器服务（比如前端、后端、数据库、缓存等）组织起来，方便一起管理。 主要功能 定义多个服务：每个服...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/docker/docker-compose.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"Docker Compose"}],["meta",{"property":"og:description","content":"Docker Compose 是什么？ 它允许你用一个 YAML 格式的配置文件（通常叫 docker-compose.yml）来定义多个 Docker 容器的服务、网络和存储卷等。 你只需一条命令，就能启动、停止、重启整个多容器应用。 它帮你把一堆相关的容器服务（比如前端、后端、数据库、缓存等）组织起来，方便一起管理。 主要功能 定义多个服务：每个服..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T08:45:44.000Z"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:modified_time","content":"2025-08-14T08:45:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker Compose\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-14T08:45:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Docker Compose 是什么？","slug":"docker-compose-是什么","link":"#docker-compose-是什么","children":[]},{"level":2,"title":"主要功能","slug":"主要功能","link":"#主要功能","children":[]},{"level":2,"title":"为什么要用 Docker Compose？","slug":"为什么要用-docker-compose","link":"#为什么要用-docker-compose","children":[]},{"level":2,"title":"一个简单的 docker-compose.yml 示例","slug":"一个简单的-docker-compose-yml-示例","link":"#一个简单的-docker-compose-yml-示例","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"相关问题解决","slug":"相关问题解决","link":"#相关问题解决","children":[]}],"git":{"createdTime":1755161144000,"updatedTime":1755161144000,"contributors":[{"name":"zouyu","username":"zouyu","email":"891374900@qq.com","commits":1,"url":"https://github.com/zouyu"}]},"readingTime":{"minutes":1.45,"words":434},"filePathRelative":"posts/前端工程化/docker/docker-compose.md","localizedDate":"2025年8月14日","excerpt":"<hr>\\n<h2>Docker Compose 是什么？</h2>\\n<ul>\\n<li>它允许你用一个 YAML 格式的配置文件（通常叫 <code>docker-compose.yml</code>）来定义多个 Docker 容器的服务、网络和存储卷等。</li>\\n<li>你只需一条命令，就能启动、停止、重启整个多容器应用。</li>\\n<li>它帮你把一堆相关的容器服务（比如前端、后端、数据库、缓存等）组织起来，方便一起管理。</li>\\n</ul>\\n<hr>\\n<h2>主要功能</h2>\\n<ul>\\n<li><strong>定义多个服务</strong>：每个服务对应一个 Docker 容器，比如 Web 服务、数据库服务、缓存服务等。</li>\\n<li><strong>服务间网络</strong>：自动创建网络，让服务之间可以用名字互相访问。</li>\\n<li><strong>依赖管理</strong>：指定服务启动顺序，确保先启动数据库，再启动后端。</li>\\n<li><strong>环境变量和配置</strong>：为每个服务设置环境变量、端口映射、挂载卷等。</li>\\n<li><strong>一键启动和停止</strong>：用命令 <code>docker-compose up</code> 启动所有服务，用 <code>docker-compose down</code> 停止并清理。</li>\\n</ul>","autoDesc":true}');export{c as comp,p as data};
