import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as t,o as n}from"./app-D4yN_ylH.js";const l={};function e(h,s){return n(),a("div",null,s[0]||(s[0]=[t(`<p>Vue3 的插槽（Slots）机制是其组件化设计的核心功能之一，它通过 <strong>编译时优化</strong> 和 <strong>运行时动态渲染</strong> 实现高效的父子组件内容分发。以下是其核心原理和实现细节：</p><hr><h3 id="一、插槽的本质-编译时的内容分发" tabindex="-1"><a class="header-anchor" href="#一、插槽的本质-编译时的内容分发"><span>一、<strong>插槽的本质：编译时的内容分发</strong></span></a></h3><p>Vue3 的插槽并非简单的 DOM 替换，而是 <strong>将父组件的模板内容编译为子组件可执行的渲染函数</strong>，实现作用域隔离和动态更新。关键流程如下：</p><hr><h3 id="二、插槽的编译阶段" tabindex="-1"><a class="header-anchor" href="#二、插槽的编译阶段"><span>二、<strong>插槽的编译阶段</strong></span></a></h3><h4 id="_1-父组件模板编译" tabindex="-1"><a class="header-anchor" href="#_1-父组件模板编译"><span>1. <strong>父组件模板编译</strong></span></a></h4><p>假设父组件使用插槽：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- Parent.vue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:white;--shiki-dark:#E06C75;">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> #default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{ data }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{ data }}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:white;--shiki-dark:#E06C75;">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>编译结果</strong>：<br> 父组件的插槽内容会被编译为一个 <strong>插槽函数（slot function）</strong>，存储在子组件的 <code>$slots</code> 或 <code>$scopedSlots</code> 中（Vue3 中统一为 <code>slots</code> 对象）。</li><li><strong>生成代码示例</strong>：<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 父组件渲染函数伪代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> parentRender</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {}, {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    default</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">props</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 插槽内容转为函数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_2-子组件模板编译" tabindex="-1"><a class="header-anchor" href="#_2-子组件模板编译"><span>2. <strong>子组件模板编译</strong></span></a></h4><p>子组件内部定义插槽：</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- Child.vue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">slot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;childData&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>编译结果</strong>：<br> 子组件的 <code>&lt;slot&gt;</code> 标签会被替换为 <strong>调用插槽函数</strong>，并传入子组件的作用域数据。</li><li><strong>生成代码示例</strong>：<div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子组件渲染函数伪代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> childRender</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {}, </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$slots</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> ctx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">childData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 执行插槽函数并传入子组件数据</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><hr><h3 id="三、运行时渲染流程" tabindex="-1"><a class="header-anchor" href="#三、运行时渲染流程"><span>三、<strong>运行时渲染流程</strong></span></a></h3><h4 id="_1-插槽内容存储" tabindex="-1"><a class="header-anchor" href="#_1-插槽内容存储"><span>1. <strong>插槽内容存储</strong></span></a></h4><ul><li><strong>普通插槽（静态内容）</strong>：<br> 在父组件渲染时，插槽内容会被提前编译并缓存在子组件的 <code>slots</code> 对象中。</li><li><strong>作用域插槽（动态内容）</strong>：<br> 插槽内容以函数形式存在，子组件渲染时通过执行函数获取最新内容。</li></ul><h4 id="_2-作用域隔离" tabindex="-1"><a class="header-anchor" href="#_2-作用域隔离"><span>2. <strong>作用域隔离</strong></span></a></h4><ul><li><strong>数据流向</strong>：<br> 父组件的插槽函数可以访问父组件的作用域，而子组件通过调用插槽函数并传入自身数据（如 <code>:data=&quot;childData&quot;</code>），实现 <strong>子→父的数据传递</strong>。</li><li><strong>无反向数据流</strong>：<br> 插槽内容无法直接修改子组件数据，保持单向数据流。</li></ul><h4 id="_3-动态更新机制" tabindex="-1"><a class="header-anchor" href="#_3-动态更新机制"><span>3. <strong>动态更新机制</strong></span></a></h4><ul><li><strong>依赖追踪</strong>：<br> 若插槽内容依赖响应式数据（如父组件的 <code>data</code> 或子组件的 <code>childData</code>），Vue3 会自动建立依赖关系。</li><li><strong>精准更新</strong>：<br> 当子组件传递的数据变化时，仅重新执行插槽函数并更新对应的 DOM 部分，避免全量渲染。</li></ul><hr><h3 id="四、vue3-插槽的核心优化" tabindex="-1"><a class="header-anchor" href="#四、vue3-插槽的核心优化"><span>四、<strong>Vue3 插槽的核心优化</strong></span></a></h3><h4 id="_1-插槽内容编译为函数" tabindex="-1"><a class="header-anchor" href="#_1-插槽内容编译为函数"><span>1. <strong>插槽内容编译为函数</strong></span></a></h4><ul><li><strong>Vue2 的问题</strong>：<br> 插槽内容作为静态 VNode 存储在父组件中，子组件数据变化时需全量重新渲染。</li><li><strong>Vue3 的优化</strong>：<br> 插槽内容编译为函数，子组件数据变化时仅重新执行函数生成新的 VNode，结合 Patch Flags 实现局部更新。</li></ul><h4 id="_2-静态提升-static-hoisting" tabindex="-1"><a class="header-anchor" href="#_2-静态提升-static-hoisting"><span>2. <strong>静态提升（Static Hoisting）</strong></span></a></h4><ul><li><strong>静态插槽内容优化</strong>：<br> 如果插槽内容无动态绑定（如纯文本），Vue3 会将其提升为静态节点，跳过重复渲染。</li></ul><h4 id="_3-fragment-支持" tabindex="-1"><a class="header-anchor" href="#_3-fragment-支持"><span>3. <strong>Fragment 支持</strong></span></a></h4><ul><li><strong>多根节点插槽</strong>：<br> Vue3 支持插槽返回多个根节点（使用 Fragment），无需外层包裹 <code>&lt;div&gt;</code>。</li></ul><hr><h3 id="五、插槽类型与实现差异" tabindex="-1"><a class="header-anchor" href="#五、插槽类型与实现差异"><span>五、<strong>插槽类型与实现差异</strong></span></a></h3><h4 id="_1-默认插槽" tabindex="-1"><a class="header-anchor" href="#_1-默认插槽"><span>1. <strong>默认插槽</strong></span></a></h4><ul><li><strong>编译结果</strong>：<br> 父组件的默认内容映射到 <code>slots.default</code>。</li><li><strong>子组件调用</strong>：<br><code>slots.default()</code> 执行插槽函数。</li></ul><h4 id="_2-具名插槽" tabindex="-1"><a class="header-anchor" href="#_2-具名插槽"><span>2. <strong>具名插槽</strong></span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> #header</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;标题&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">slot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;header&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>编译结果</strong>：<br> 父组件的具名插槽存储在 <code>slots.header</code> 中。</li><li><strong>子组件调用</strong>：<br><code>slots.header()</code>。</li></ul><h4 id="_3-作用域插槽" tabindex="-1"><a class="header-anchor" href="#_3-作用域插槽"><span>3. <strong>作用域插槽</strong></span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 父组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> #item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{ value }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{ value }}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 子组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">slot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;item&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;itemValue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>数据传递</strong>：<br> 子组件通过函数参数传递数据（如 <code>:value=&quot;itemValue&quot;</code>），父组件通过解构接收。</li></ul><hr><h3 id="六、性能对比-vue3-vs-vue2" tabindex="-1"><a class="header-anchor" href="#六、性能对比-vue3-vs-vue2"><span>六、<strong>性能对比（Vue3 vs Vue2）</strong></span></a></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>Vue2</strong></th><th><strong>Vue3</strong></th></tr></thead><tbody><tr><td><strong>插槽内容存储</strong></td><td>静态 VNode 数组</td><td>动态函数（按需生成 VNode）</td></tr><tr><td><strong>更新范围</strong></td><td>子组件数据变化时全量更新插槽</td><td>仅重新执行插槽函数，局部更新</td></tr><tr><td><strong>作用域隔离</strong></td><td>通过 <code>scopeId</code> 实现样式隔离</td><td>天然函数作用域隔离</td></tr><tr><td><strong>内存占用</strong></td><td>缓存所有插槽 VNode，内存消耗较高</td><td>按需生成 VNode，内存更优化</td></tr></tbody></table><hr><h3 id="七、示例-插槽的运行时结果" tabindex="-1"><a class="header-anchor" href="#七、示例-插槽的运行时结果"><span>七、<strong>示例：插槽的运行时结果</strong></span></a></h3><h4 id="父组件模板" tabindex="-1"><a class="header-anchor" href="#父组件模板"><span>父组件模板：</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:white;--shiki-dark:#E06C75;">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> #content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;{ message }&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;{{ message }}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:white;--shiki-dark:#E06C75;">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="子组件模板" tabindex="-1"><a class="header-anchor" href="#子组件模板"><span>子组件模板：</span></a></h4><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">slot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;content&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;childMessage&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">slot</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="编译后的伪代码" tabindex="-1"><a class="header-anchor" href="#编译后的伪代码"><span>编译后的伪代码：</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 父组件渲染函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">Child</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {}, {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  content</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ({ </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;p&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 子组件渲染函数</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">h</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;div&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {}, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">slots</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">message</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Hello from child&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="八、总结" tabindex="-1"><a class="header-anchor" href="#八、总结"><span>八、<strong>总结</strong></span></a></h3><p>Vue3 的插槽机制通过以下设计实现高效内容分发：</p><ol><li><strong>编译时函数化</strong>：将插槽内容编译为函数，实现作用域隔离和按需渲染。</li><li><strong>动态数据传递</strong>：子组件通过函数参数向父组件插槽传递数据，保持单向数据流。</li><li><strong>精准更新</strong>：结合响应式系统和 Patch Flags，仅更新变化的插槽部分。</li><li><strong>静态优化</strong>：对静态插槽内容进行提升，减少运行时开销。</li></ol><p>这种设计使得 Vue3 的插槽在复杂场景下（如列表渲染、动态插槽名）仍能保持高性能，同时提供更灵活的组件复用能力。</p>`,56)]))}const p=i(l,[["render",e]]),d=JSON.parse('{"path":"/posts/vue/vue3/%E6%8F%92%E6%A7%BD.html","title":"Vue 3 插槽","lang":"zh-CN","frontmatter":{"title":"Vue 3 插槽","tags":["vue3"],"description":"Vue3 的插槽（Slots）机制是其组件化设计的核心功能之一，它通过 编译时优化 和 运行时动态渲染 实现高效的父子组件内容分发。以下是其核心原理和实现细节： 一、插槽的本质：编译时的内容分发 Vue3 的插槽并非简单的 DOM 替换，而是 将父组件的模板内容编译为子组件可执行的渲染函数，实现作用域隔离和动态更新。关键流程如下： 二、插槽的编译阶段 ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/vue/vue3/%E6%8F%92%E6%A7%BD.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"Vue 3 插槽"}],["meta",{"property":"og:description","content":"Vue3 的插槽（Slots）机制是其组件化设计的核心功能之一，它通过 编译时优化 和 运行时动态渲染 实现高效的父子组件内容分发。以下是其核心原理和实现细节： 一、插槽的本质：编译时的内容分发 Vue3 的插槽并非简单的 DOM 替换，而是 将父组件的模板内容编译为子组件可执行的渲染函数，实现作用域隔离和动态更新。关键流程如下： 二、插槽的编译阶段 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-20T07:48:26.000Z"}],["meta",{"property":"article:tag","content":"vue3"}],["meta",{"property":"article:modified_time","content":"2025-05-20T07:48:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue 3 插槽\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-20T07:48:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"一、插槽的本质：编译时的内容分发","slug":"一、插槽的本质-编译时的内容分发","link":"#一、插槽的本质-编译时的内容分发","children":[]},{"level":3,"title":"二、插槽的编译阶段","slug":"二、插槽的编译阶段","link":"#二、插槽的编译阶段","children":[]},{"level":3,"title":"三、运行时渲染流程","slug":"三、运行时渲染流程","link":"#三、运行时渲染流程","children":[]},{"level":3,"title":"四、Vue3 插槽的核心优化","slug":"四、vue3-插槽的核心优化","link":"#四、vue3-插槽的核心优化","children":[]},{"level":3,"title":"五、插槽类型与实现差异","slug":"五、插槽类型与实现差异","link":"#五、插槽类型与实现差异","children":[]},{"level":3,"title":"六、性能对比（Vue3 vs Vue2）","slug":"六、性能对比-vue3-vs-vue2","link":"#六、性能对比-vue3-vs-vue2","children":[]},{"level":3,"title":"七、示例：插槽的运行时结果","slug":"七、示例-插槽的运行时结果","link":"#七、示例-插槽的运行时结果","children":[]},{"level":3,"title":"八、总结","slug":"八、总结","link":"#八、总结","children":[]}],"git":{"createdTime":1745573689000,"updatedTime":1747727306000,"contributors":[{"name":"zy","username":"zy","email":"891374900@qq.com","commits":4,"url":"https://github.com/zy"},{"name":"zouyu","username":"zouyu","email":"891374900@qq.com","commits":1,"url":"https://github.com/zouyu"}]},"readingTime":{"minutes":4.37,"words":1312},"filePathRelative":"posts/vue/vue3/插槽.md","localizedDate":"2025年4月25日","excerpt":"<p>Vue3 的插槽（Slots）机制是其组件化设计的核心功能之一，它通过 <strong>编译时优化</strong> 和 <strong>运行时动态渲染</strong> 实现高效的父子组件内容分发。以下是其核心原理和实现细节：</p>\\n<hr>\\n<h3>一、<strong>插槽的本质：编译时的内容分发</strong></h3>\\n<p>Vue3 的插槽并非简单的 DOM 替换，而是 <strong>将父组件的模板内容编译为子组件可执行的渲染函数</strong>，实现作用域隔离和动态更新。关键流程如下：</p>\\n<hr>\\n<h3>二、<strong>插槽的编译阶段</strong></h3>","autoDesc":true}');export{p as comp,d as data};
