import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as l}from"./app-D4yN_ylH.js";const e={};function h(t,s){return l(),a("div",null,s[0]||(s[0]=[n(`<h2 id="一、关于webpack-构建优化" tabindex="-1"><a class="header-anchor" href="#一、关于webpack-构建优化"><span>一、关于webpack 构建优化</span></a></h2><p><strong><a href="https://juejin.cn/post/7233298696292040741#heading-3" target="_blank" rel="noopener noreferrer">参考文章</a></strong></p><p><strong><a href="https://juejin.cn/post/7221516772162289723#heading-15" target="_blank" rel="noopener noreferrer">参考 </a></strong></p><ul><li>配合webpack 实现路由懒加载, 也可以实现组件级的懒加载 例如 react.lazy 配合 Suspense 实现</li><li>splitChunks 可以对js 进行代码分割 提取公共js</li></ul><details class="hint-container details"><summary>详情</summary><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  optimization</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    splitChunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;all&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 处理所有模块</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      minSize</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 至少 20KB 才拆分</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      maxSize</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 200000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 避免单个 chunk 过大</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      minChunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 至少被引用 1 次</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      automaticNameDelimiter</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;-&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// chunk 命名分隔符</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      cacheGroups</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        react</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">node_modules</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">(react</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">react-dom)</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 专门提取 react 和 react-dom</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;react-vendor&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 提取的文件命名为 react-vendor.js  也可以 [name].[hash] 命名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;all&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          priority</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 优先级设置为高</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        lodash</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">node_modules</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">lodash</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 提取 lodash</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;lodash&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 提取的文件命名为 lodash.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;all&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        common</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;[name].[hash]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 使用 \`[hash]\` 生成唯一的文件名</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          minChunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,           </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 至少 2 个模块引用时拆分</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;all&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,          </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 拆分所有类型的模块</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ul><li><p>mini-css-extract-plugin 实现css 按需加载</p></li><li><p>cdn 加速加载,对一些通用的第三方包可以通过cdn 加载 可以配置 externals 告诉webpack 不用打包 在index.html 手动引用cdn 资源（也可以通过插件 不用手动修改html）</p></li><li><p>压缩代码 Terser</p></li><li><p>压缩图片 file-loader</p></li><li><p>tree-shaking 依赖 ES6 模块（ESM）的代码起作用，因为 ESM 的 import 和 export 是静态结构，能够在编译时就确定哪些模块和导出项被使用。<br> 减少函数的副作用 （ <strong>指的是函数在执行过程中，除了返回结果以外，对外部状态（比如全局变量、输入输出、文件、数据库、DOM 等）产生的影响</strong>）<br> 是commonjs 可通过 babel-plugin-lodash 来实现类似的效果</p></li><li><p>DllPlugin 对有些包单独构建</p></li><li><p>noParse 告诉webpack 不用解析 直接编译 提高打包速度</p><details class="hint-container details"><summary>详情</summary><p>✅ <strong><code>noParse</code> 适用于：</strong><br> - 体积较大、<strong>不依赖其他模块</strong> 的库（如 jQuery、Lodash、moment.js）。<br> - 预编译的库，避免 Webpack <strong>重复解析</strong> 提高构建速度。</p><p>❌ <strong><code>noParse</code> 不适用于：</strong><br> - 依赖其他模块的库（如果库内部 <code>require</code> 了别的模块，Webpack 不会解析它们）。<br> - 需要 Tree Shaking 的库，<code>noParse</code> 会导致 Webpack 不能优化未使用的代码。</p><pre><code>如果只是想**不解析依赖但仍然打包**，用 \`noParse\`；如果是**完全不打包，使用 CDN 资源**，用 \`externals\`。
</code></pre></details></li><li><p>IgnorePlugin 剔除某些包 典型的例子是 moment 这个包，一般情况下在构建时会自动引入其 locale 目录下的多国语言包,Webpack 提供的 IgnorePlugin ，即可在「构建模块时」直接剔除那些需要被排除的模块，从而提升构建模块的速度，并减少产物体积。</p></li><li><p>持久化文件系统缓存（Persistent Caching） webpack5</p></li><li><p>Loader 缓存 输出文件名的缓存策略</p></li></ul><hr><ul><li>打包速度分析 speed-measure-webpack-plugin</li><li>打包体积分析 webpack-bundle-analyzer</li></ul><hr><p>下面提供一个较为完整的 webpack 5 配置示例，该配置包含了多项优化措施，每一部分都附有注释说明：</p><h2 id="二、webpack5" tabindex="-1"><a class="header-anchor" href="#二、webpack5"><span>二、webpack5</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;path&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">ModuleFederationPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;webpack&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">container</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> HtmlWebpackPlugin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;html-webpack-plugin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 1. 设置 production 模式，自动开启 tree shaking、压缩等优化</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  mode</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;production&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 2. 多入口配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    main</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./src/index.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 如果有多个入口页面，可继续添加，如：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // admin: &#39;./src/admin.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 3. 输出配置，使用 contenthash 确保缓存更新</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  output</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    filename</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;[name].[contenthash].js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dist&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    clean</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 构建前清理 dist 目录</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 4. 持久化文件系统缓存，加速二次构建</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  cache</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;filesystem&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    buildDependencies</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      config</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__filename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当配置文件发生变化时重新构建 __filename 是一个内置的全局变量，它由 Node.js 模块系统自动提供，代表当前模块的绝对文件路径。也就是说，它的值由 Node.js 运行时决定，而不是你手动设置的。</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 5. 开启 WebAssembly 支持（实验性）</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  experiments</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    asyncWebAssembly</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 6. 模块规则：处理静态资源等</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">(png</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">jpe</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">?</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">g</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">gif)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;asset&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 自动在内联和独立文件之间进行选择</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 其他 loader 配置，如 Babel 处理 JS/JSX 文件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 7. 移除 Node.js 内置模块 polyfills，减小打包体积</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  resolve</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    fallback</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      fs</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      os</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 8. 优化配置：Tree Shaking 与 SplitChunks</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  optimization</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 开启未使用代码剔除，production 模式下默认启用</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    usedExports</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    splitChunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;all&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 同步与异步模块均拆分</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      cacheGroups</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 提取 node_modules 中的第三方依赖</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        vendor</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">node_modules</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">[</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">/]</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;vendor&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;all&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 提取多个入口共享的代码</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        common</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;common&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          minChunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 至少两个入口中使用</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          chunks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;all&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          reuseExistingChunk</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 9. 插件配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Module Federation 用于实现微前端架构</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ModuleFederationPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;app&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      filename</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;remoteEntry.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      exposes</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 暴露组件供其他应用使用</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;./Button&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./src/Button&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      remotes</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 引用其他远程模块</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        remoteApp</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;remoteApp@http://localhost:3001/remoteEntry.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      shared</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 共享依赖，保证只有一个 React 实例</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        react</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">singleton</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eager</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &#39;react-dom&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">singleton</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">eager</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // HtmlWebpackPlugin 自动生成 HTML 文件并引入打包后的资源</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      template</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./src/index.html&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="webpack5说明" tabindex="-1"><a class="header-anchor" href="#webpack5说明"><span>webpack5说明</span></a></h2><ol><li><p><strong>持久化缓存</strong><br> 通过 <code>cache.type: &#39;filesystem&#39;</code>，Webpack 会将构建结果存储到磁盘上，后续构建可以利用缓存加速编译过程。</p></li><li><p><strong>Module Federation</strong><br> 使用 <code>ModuleFederationPlugin</code>，可以实现微前端架构，在运行时共享模块或组件。示例中既暴露了本地组件，也引用了远程模块。</p></li><li><p><strong>内置 Asset Modules</strong><br> 使用 <code>type: &#39;asset&#39;</code> 替代了传统的 file-loader/url-loader，能根据文件大小自动决定是否内联资源，简化了配置。</p></li><li><p><strong>Tree Shaking 与 SplitChunks</strong><br> 在 production 模式下自动启用 tree shaking。同时，通过 <code>splitChunks.cacheGroups</code> 配置提取第三方依赖（vendor）和多个入口共享的代码（common），避免重复加载。</p></li><li><p><strong>移除 Node.js Polyfills</strong><br> 通过 <code>resolve.fallback</code> 设置为 <code>false</code>，移除不需要在浏览器中运行的 Node 内置模块的 polyfills，从而减小打包体积。</p></li><li><p><strong>WebAssembly 支持</strong><br> 开启 <code>experiments.asyncWebAssembly</code> 后，Webpack 可以直接处理 <code>.wasm</code> 文件，方便在前端项目中使用 WebAssembly。</p></li></ol><p>以上代码示例展示了 Webpack 5 在多入口配置、持久化缓存、模块联邦、资源处理、代码拆分等方面的具体优化措施，能够帮助你构建高效、模块化且易于维护的项目。</p><h2 id="三、-webpack-热更新" tabindex="-1"><a class="header-anchor" href="#三、-webpack-热更新"><span>三、 webpack 热更新</span></a></h2><p>在面试中解释 Webpack 热更新（HMR）原理时，建议采用<strong>结构化、分步骤</strong>的方式，突出重点技术流程，并结合通俗易懂的比喻（可选）让面试官快速理解。以下是总结后的回答框架：</p><hr><h3 id="_1-一句话定义" tabindex="-1"><a class="header-anchor" href="#_1-一句话定义"><span><strong>1. 一句话定义</strong></span></a></h3><p>「Webpack 热更新（HMR）是一种在应用运行时动态替换、添加或删除模块的机制，无需刷新页面即可保留应用状态，极大提升开发效率。」</p><hr><h3 id="_2-核心流程-分步骤解释" tabindex="-1"><a class="header-anchor" href="#_2-核心流程-分步骤解释"><span><strong>2. 核心流程（分步骤解释）</strong></span></a></h3><p><strong>① 通信层：WebSocket 建立双向通道</strong></p><ul><li>Webpack Dev Server 启动时创建 WebSocket 服务，与浏览器客户端保持长连接。</li><li><strong>作用</strong>：服务器主动推送更新事件（如文件变化、编译完成）。</li></ul><p><strong>② 监听文件变化与增量编译</strong></p><ul><li>开发服务器监听文件系统变化，触发 Webpack 的增量编译（仅编译修改的部分）。</li><li>生成唯一 Hash 标识本次构建，并生成两个关键文件： <ul><li><code>[hash].hot-update.json</code>（Manifest，记录哪些模块需要更新）。</li><li><code>[module-id].hot-update.js</code>（新模块代码）。</li></ul></li></ul><p><strong>③ 客户端接收更新通知</strong></p><ul><li>服务器通过 WebSocket 发送 <code>hash</code> 和 <code>ok</code> 事件，告知客户端新版本准备就绪。</li><li>客户端通过 Hash 对比，发现更新后，<strong>异步请求 Manifest 和更新代码</strong>（通过 JSONP 或 Ajax）。</li></ul><p><strong>④ 模块热替换与状态保留</strong></p><ul><li><strong>HMR Runtime（运行时）</strong> 负责关键操作： <ol><li><strong>移除旧模块</strong>：清理缓存（如 <code>delete require.cache[moduleId]</code>）。</li><li><strong>插入新模块</strong>：执行新代码，替换旧模块引用。</li><li><strong>向上冒泡更新</strong>：从被修改的模块开始，递归检查父模块是否“接受”热更新（通过 <code>module.hot.accept</code> 声明）。</li></ol></li><li><strong>框架级 HMR</strong>：React/Vue 等框架通过 loader（如 <code>react-hot-loader</code>）在组件替换时保留状态（如 Redux Store、组件内部数据）。</li></ul><p><strong>⑤ 异常处理</strong></p><ul><li>若热更新失败（如模块替换导致错误），HMR 会降级为整页刷新（<code>window.location.reload()</code>），确保应用可用性。</li></ul><hr><h3 id="_3-关键技术点-加分项" tabindex="-1"><a class="header-anchor" href="#_3-关键技术点-加分项"><span><strong>3. 关键技术点（加分项）</strong></span></a></h3><ul><li><strong>增量更新</strong>：仅更新受影响的模块子树，而非整个应用（类似“局部刷新”）。</li><li><strong>模块系统集成</strong>：依赖 Webpack 的模块依赖图，精准定位更新范围。</li><li><strong>框架协作</strong>：通过框架的 HMR API（如 Vue 的 <code>vue-loader</code>）实现组件级热替换。</li></ul><hr><h3 id="_4-简明总结-给面试官一个记忆点" tabindex="-1"><a class="header-anchor" href="#_4-简明总结-给面试官一个记忆点"><span><strong>4. 简明总结（给面试官一个记忆点）</strong></span></a></h3><p>「HMR 的核心是通过 WebSocket 实现实时通信，结合 Webpack 的模块依赖分析和运行时替换逻辑，实现代码的局部更新。其优势在于保留应用状态的同时提升开发体验，而异常时的自动回退机制保证了可靠性。」</p><hr><h3 id="_5-常见追问与应对" tabindex="-1"><a class="header-anchor" href="#_5-常见追问与应对"><span><strong>5. 常见追问与应对</strong></span></a></h3><ul><li><p><strong>Q：HMR 和 Live Reload 的区别？</strong></p><ul><li>A：「Live Reload 是整体刷新页面，丢失状态；HMR 是精准替换模块，保留状态。」</li></ul></li><li><p><strong>Q：如何配置 Webpack 启用 HMR？</strong></p><ul><li>A：「启用 <code>devServer.hot: true</code>，并添加 <code>HotModuleReplacementPlugin</code>；对于框架，还需对应 loader（如 <code>react-hot-loader</code>）支持。」</li></ul></li><li><p><strong>Q：HMR 一定不会刷新页面吗？</strong></p><ul><li>A：「不一定。如果模块未声明 <code>accept</code> 或更新过程出错，会触发回退刷新。」</li></ul></li></ul><hr><h3 id="回答技巧" tabindex="-1"><a class="header-anchor" href="#回答技巧"><span><strong>回答技巧</strong></span></a></h3><ul><li><strong>结合流程图手势</strong>：边解释边用手势模拟「文件修改 → 编译 → 推送 → 替换」流程。</li><li><strong>举例说明</strong>：提到 React 组件更新时如何保留状态，展示对实际开发场景的理解。</li></ul><p>通过这样的结构化回答，既能体现技术深度，又能让面试官清晰感知你的逻辑表达能力。</p><p>好的！我们可以聚焦于 <strong>React-Refresh（React Fast Refresh）</strong> 的核心机制，解释它如何与 Webpack HMR 配合实现热更新。以下是针对面试场景的简洁版总结：</p><hr><h3 id="_1-一句话定位" tabindex="-1"><a class="header-anchor" href="#_1-一句话定位"><span><strong>1. 一句话定位</strong></span></a></h3><p>「React-Refresh 是 React 官方推荐的 HMR 解决方案，通过 Babel 插件和运行时协作，在组件代码更新时保留组件状态（如 <code>useState</code>、<code>useEffect</code> 的闭包状态），实现无缝热更新。」</p><hr><h3 id="_2-核心协作流程" tabindex="-1"><a class="header-anchor" href="#_2-核心协作流程"><span><strong>2. 核心协作流程</strong></span></a></h3><h4 id="_1-编译阶段-注入-hmr-能力" tabindex="-1"><a class="header-anchor" href="#_1-编译阶段-注入-hmr-能力"><span><strong>① 编译阶段：注入 HMR 能力</strong></span></a></h4><ul><li><strong>Babel 插件</strong>（<code>react-refresh/babel</code>）：<br> 在编译时，为每个 React 组件注入唯一的「签名」和「热更新逻辑」，例如： <ul><li>为组件添加 <code>$$typeof</code> 标识，标记为可热更新组件。</li><li>插入 <code>__register__</code> 方法，用于运行时注册组件与模块的关联。</li></ul></li></ul><h4 id="_2-运行时-hmr-与-react-refresh-协作" tabindex="-1"><a class="header-anchor" href="#_2-运行时-hmr-与-react-refresh-协作"><span><strong>② 运行时：HMR 与 React-Refresh 协作</strong></span></a></h4><ol><li><p><strong>Webpack HMR 触发更新</strong>：</p><ul><li>文件修改 → Webpack 增量编译 → 通过 WebSocket 通知客户端拉取新模块代码。</li></ul></li><li><p><strong>React-Refresh 运行时接管</strong>：</p><ul><li><strong>模块注册</strong>：每个 React 组件在首次渲染时，通过 <code>__register__</code> 方法将自身与模块 ID 绑定。</li><li><strong>状态保留</strong>： <ul><li>当组件代码更新时，React-Refresh 通过「组件签名」匹配新旧组件。</li><li><strong>复用 Fiber 节点</strong>：React 的协调器（Reconciler）复用现有 Fiber 节点，保留 <code>state</code>、<code>ref</code> 等状态。</li><li><strong>Hooks 状态保留</strong>：对 <code>useState</code>、<code>useReducer</code> 等 Hook，通过闭包和链表结构保留当前状态。</li></ul></li></ul></li><li><p><strong>强制更新策略</strong>：</p><ul><li>若组件代码发生「破坏性变更」（如删除某个 Hook），React-Refresh 会标记该组件需要「完全重置」，丢弃旧状态。</li><li>否则，仅触发局部重新渲染（类似 <code>setState</code>），保留所有状态。</li></ul></li></ol><hr><h3 id="_3-关键技术细节-加分项" tabindex="-1"><a class="header-anchor" href="#_3-关键技术细节-加分项"><span><strong>3. 关键技术细节（加分项）</strong></span></a></h3><h4 id="_1-签名匹配-signature-matching" tabindex="-1"><a class="header-anchor" href="#_1-签名匹配-signature-matching"><span><strong>① 签名匹配（Signature Matching）</strong></span></a></h4><ul><li>每个组件在编译时生成唯一的「签名」（基于代码结构），用于热更新时判断新旧组件是否兼容。</li><li><strong>示例</strong>：若修改了组件的 <code>props</code> 类型但签名不变，可能引发状态错乱，此时需要手动刷新。</li></ul><h4 id="_2-代理组件-proxies" tabindex="-1"><a class="header-anchor" href="#_2-代理组件-proxies"><span><strong>② 代理组件（Proxies）</strong></span></a></h4><ul><li>React-Refresh 运行时为每个组件创建轻量级代理，拦截组件的渲染逻辑。</li><li><strong>作用</strong>：在更新时动态替换组件实现，同时保持组件实例（Fiber 节点）不变。</li></ul><h4 id="_3-边界处理-error-boundaries" tabindex="-1"><a class="header-anchor" href="#_3-边界处理-error-boundaries"><span><strong>③ 边界处理（Error Boundaries）</strong></span></a></h4><ul><li>热更新过程中若抛出错误，React-Refresh 会捕获并回退到上一次正常状态，避免页面崩溃。</li></ul><hr><h3 id="_4-配置与实战示例" tabindex="-1"><a class="header-anchor" href="#_4-配置与实战示例"><span><strong>4. 配置与实战示例</strong></span></a></h3><h4 id="_1-webpack-配置" tabindex="-1"><a class="header-anchor" href="#_1-webpack-配置"><span><strong>① Webpack 配置</strong></span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> ReactRefreshWebpackPlugin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;@pmmmwh/react-refresh-webpack-plugin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...其他配置</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> webpack</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">HotModuleReplacementPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ReactRefreshWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 关键插件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">jsx</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        exclude</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /node_modules/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        use</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;babel-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">            options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">              plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;react-refresh/babel&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">], </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 注入 Babel 插件</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-代码更新行为演示" tabindex="-1"><a class="header-anchor" href="#_2-代码更新行为演示"><span><strong>② 代码更新行为演示</strong></span></a></h4><div class="language-jsx line-numbers-mode" data-highlighter="shiki" data-ext="jsx" data-title="jsx" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Counter.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;react&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Counter</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">setCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> useState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> onClick</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;Count: </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> Counter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>热更新行为</strong>： <ul><li>修改按钮文字 → 保留 <code>count</code> 状态。</li><li>删除 <code>useState</code> → 触发完全重置，状态丢失。</li></ul></li></ul><hr><h3 id="_5-对比旧方案-react-hot-loader" tabindex="-1"><a class="header-anchor" href="#_5-对比旧方案-react-hot-loader"><span><strong>5. 对比旧方案（react-hot-loader）</strong></span></a></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>React-Refresh</strong></th><th><strong>react-hot-loader</strong></th></tr></thead><tbody><tr><td><strong>官方支持</strong></td><td>✅ React 团队维护</td><td>❌ 社区维护</td></tr><tr><td><strong>Hooks 支持</strong></td><td>✅ 原生支持</td><td>⚠️ 需要额外配置</td></tr><tr><td><strong>实现复杂度</strong></td><td>低（集成到 Babel/Webpack 底层）</td><td>高（依赖 HOC 包装组件）</td></tr><tr><td><strong>稳定性</strong></td><td>高</td><td>中等（易出现边界问题）</td></tr></tbody></table><hr><h3 id="_6-面试回答模板" tabindex="-1"><a class="header-anchor" href="#_6-面试回答模板"><span><strong>6. 面试回答模板</strong></span></a></h3><p>「React-Refresh 实现热更新的核心分为三步：</p><ol><li><strong>编译阶段</strong>：通过 Babel 插件为组件注入唯一签名和注册逻辑，标记可热更新组件。</li><li><strong>运行时协作</strong>：Webpack HMR 通知更新后，React-Refresh 通过签名匹配新旧组件，利用 React 的 Fiber 架构复用节点和 Hooks 闭包，保留状态。</li><li><strong>安全策略</strong>：若检测到破坏性变更（如删除 Hook），自动回退到完全刷新，确保应用稳定性。<br> 与旧方案相比，React-Refresh 深度集成 React 运行时，对函数组件和 Hooks 的支持更加完善，是现代化 React 项目的首选方案。」</li></ol><hr><h2 id="四、-loader-和-plugin-的区别" tabindex="-1"><a class="header-anchor" href="#四、-loader-和-plugin-的区别"><span>四、 <strong>Loader</strong> 和 <strong>Plugin</strong> 的区别</span></a></h2><p>在面试中回答「Loader 和 Plugin 的区别」时，可以通过以下结构化方式解释，突出核心差异和实际场景应用：</p><hr><h3 id="_1-一句话定义-直接点明核心" tabindex="-1"><a class="header-anchor" href="#_1-一句话定义-直接点明核心"><span><strong>1. 一句话定义（直接点明核心）</strong></span></a></h3><p>「Loader 是文件的<strong>转换器</strong>，负责处理特定类型文件（如 <code>.scss</code> → <code>.css</code>）；Plugin 是 Webpack 构建流程的<strong>扩展器</strong>，通过钩子机制干预打包过程，实现更复杂的功能（如优化、资源注入等）。」</p><hr><h3 id="_2-核心区别-分点对比" tabindex="-1"><a class="header-anchor" href="#_2-核心区别-分点对比"><span><strong>2. 核心区别（分点对比）</strong></span></a></h3><table><thead><tr><th><strong>维度</strong></th><th><strong>Loader</strong></th><th><strong>Plugin</strong></th></tr></thead><tbody><tr><td><strong>功能定位</strong></td><td>文件内容转换（单一职责）</td><td>扩展构建流程（多维度干预）</td></tr><tr><td><strong>执行时机</strong></td><td>在模块加载阶段（<code>module.rules</code>）执行</td><td>在整个构建周期中通过钩子（hooks）触发</td></tr><tr><td><strong>配置方式</strong></td><td>在 <code>module.rules</code> 中定义</td><td>在 <code>plugins</code> 数组中实例化</td></tr><tr><td><strong>输入输出</strong></td><td>接收文件内容，返回处理后的内容</td><td>直接操作 Webpack 的编译对象或输出结果</td></tr><tr><td><strong>典型场景</strong></td><td>编译 TypeScript、处理图片、转换 SCSS</td><td>生成 HTML 文件、代码压缩、分包优化</td></tr></tbody></table><hr><h3 id="_3-技术细节-结合-webpack-运行机制" tabindex="-1"><a class="header-anchor" href="#_3-技术细节-结合-webpack-运行机制"><span><strong>3. 技术细节（结合 Webpack 运行机制）</strong></span></a></h3><h4 id="loader-的工作流程" tabindex="-1"><a class="header-anchor" href="#loader-的工作流程"><span><strong>Loader 的工作流程</strong></span></a></h4><ol><li><strong>匹配规则</strong>：根据 <code>test</code> 正则匹配文件类型（如 <code>/\\.js$/</code>）。</li><li><strong>链式调用</strong>：按从右到左的顺序执行多个 Loader（如 <code>[&#39;babel-loader&#39;, &#39;ts-loader&#39;]</code> 先执行 <code>ts-loader</code>）。</li><li><strong>内容转换</strong>：每个 Loader 接收上一个 Loader 的处理结果，最终输出 JS 模块或静态资源。</li></ol><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">scss</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        use</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;style-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将 CSS 注入到 DOM</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;css-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 解析 CSS 的 @import 和 url()</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">          &#39;sass-loader&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">   // 编译 SCSS → CSS</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="plugin-的钩子机制" tabindex="-1"><a class="header-anchor" href="#plugin-的钩子机制"><span><strong>Plugin 的钩子机制</strong></span></a></h4><ol><li><strong>生命周期钩子</strong>：Webpack 在编译、优化、生成资源等阶段暴露钩子（如 <code>emit</code>、<code>compile</code>）。</li><li><strong>插件注册</strong>：通过 <code>apply(compiler)</code> 方法订阅钩子，操作编译对象（如 <code>compilation.assets</code>）。</li><li><strong>功能扩展</strong>：例如，<code>HtmlWebpackPlugin</code> 在 <code>emit</code> 阶段生成 HTML 并注入资源链接。</li></ol><p><strong>示例</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> HtmlWebpackPlugin</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;html-webpack-plugin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HtmlWebpackPlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      template</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./src/index.html&#39;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 基于模板生成最终 HTML</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="_4-通俗类比-帮助面试官快速理解" tabindex="-1"><a class="header-anchor" href="#_4-通俗类比-帮助面试官快速理解"><span><strong>4. 通俗类比（帮助面试官快速理解）</strong></span></a></h3><ul><li><strong>Loader</strong>：像“翻译员”，负责将不同语言的文件（如 SCSS、TypeScript）翻译成 Webpack 能理解的 JS 模块。</li><li><strong>Plugin</strong>：像“扩展工具包”，在打包过程中添加新功能（如压缩代码、拷贝文件），类似给生产线加装自动化机器人。</li></ul><hr><h3 id="_5-常见误区澄清-避免踩坑" tabindex="-1"><a class="header-anchor" href="#_5-常见误区澄清-避免踩坑"><span><strong>5. 常见误区澄清（避免踩坑）</strong></span></a></h3><ul><li><strong>误区 1</strong>：Loader 只能处理非 JS 文件？ <ul><li><strong>纠正</strong>：Loader 可以处理任何文件，例如 <code>raw-loader</code> 直接返回文件内容为字符串。</li></ul></li><li><strong>误区 2</strong>：Plugin 必须依赖 Loader？ <ul><li><strong>纠正</strong>：Plugin 和 Loader 是独立的，例如 <code>CleanWebpackPlugin</code> 清空输出目录，无需 Loader。</li></ul></li><li><strong>误区 3</strong>：Loader 和 Plugin 执行顺序无关？ <ul><li><strong>纠正</strong>：Loader 按配置顺序执行，Plugin 的钩子触发时机由 Webpack 内部阶段决定。</li></ul></li></ul><hr><h3 id="_6-结合项目经验-增强说服力" tabindex="-1"><a class="header-anchor" href="#_6-结合项目经验-增强说服力"><span><strong>6. 结合项目经验（增强说服力）</strong></span></a></h3><p>「在我之前的项目中，Loader 和 Plugin 的协作非常关键。例如：</p><ul><li>使用 <code>babel-loader</code> 转换 ES6+ 代码，<code>eslint-loader</code> 进行代码规范检查。</li><li>通过 <code>MiniCssExtractPlugin</code> 将 CSS 提取为独立文件，再通过 <code>OptimizeCSSAssetsPlugin</code> 压缩 CSS。<br> 这种组合既能保证代码质量，又能优化最终产物的体积和性能。」</li></ul><hr><h3 id="_7-面试回答模板-简洁版" tabindex="-1"><a class="header-anchor" href="#_7-面试回答模板-简洁版"><span><strong>7. 面试回答模板（简洁版）</strong></span></a></h3><p>「Loader 和 Plugin 的核心区别在于：</p><ol><li><strong>功能</strong>：Loader 专注于文件内容转换（如编译 SCSS），Plugin 则扩展构建流程（如生成 HTML）。</li><li><strong>执行时机</strong>：Loader 在模块加载阶段处理文件，Plugin 通过钩子介入整个构建生命周期。</li><li><strong>配置方式</strong>：Loader 在 <code>module.rules</code> 中链式配置，Plugin 在 <code>plugins</code> 数组中实例化。<br> 实际开发中，Loader 处理“单个文件的内容转换”，Plugin 解决“全局构建需求”（如优化、资源管理），两者协同完成复杂的前端工程化任务。」</li></ol><hr><p>通过这样的结构化回答，既能体现对 Webpack 机制的理解，又能通过实例和类比让面试官快速抓住重点。</p><hr><h2 id="五、如何写loader-和-plugin" tabindex="-1"><a class="header-anchor" href="#五、如何写loader-和-plugin"><span><strong>五、如何写Loader 和 Plugin</strong></span></a></h2><p>在面试中介绍如何编写 Loader 和 Plugin，并说明实际开发中的应用场景，可以按以下结构回答，突出技术实现和实际价值：</p><hr><h3 id="一、如何编写一个-loader" tabindex="-1"><a class="header-anchor" href="#一、如何编写一个-loader"><span><strong>一、如何编写一个 Loader</strong></span></a></h3><h4 id="_1-loader-的核心特点" tabindex="-1"><a class="header-anchor" href="#_1-loader-的核心特点"><span><strong>1. Loader 的核心特点</strong></span></a></h4><ul><li><strong>单一职责</strong>：只处理一种文件类型的转换（例如：Markdown → HTML）。</li><li><strong>链式调用</strong>：多个 Loader 按顺序处理同一文件（如 <code>sass-loader</code> → <code>css-loader</code> → <code>style-loader</code>）。</li><li><strong>函数式设计</strong>：接收文件内容，返回处理后的内容（支持同步或异步）。</li><li>如果某个 Loader 的 pitch 方法有返回值，则会跳过后续 Loader 的 pitch 方法和正常执行阶段，直接返回该值作为模块的导出内容。</li></ul><h4 id="_2-实现一个简单-loader-示例" tabindex="-1"><a class="header-anchor" href="#_2-实现一个简单-loader-示例"><span><strong>2. 实现一个简单 Loader（示例）</strong></span></a></h4><p><strong>场景</strong>：编写一个替换代码中特定字符串的 Loader。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// replace-loader.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // source 是文件原始内容</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">replace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/foo/</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">g</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bar&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将所有 &quot;foo&quot; 替换为 &quot;bar&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>配置使用</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">js</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        use</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">          loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./replace-loader.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-高级-loader-技巧" tabindex="-1"><a class="header-anchor" href="#_3-高级-loader-技巧"><span><strong>3. 高级 Loader 技巧</strong></span></a></h4><ul><li><strong>异步处理</strong>：通过 <code>this.async()</code> 处理异步任务（如调用 API 转换代码）。</li><li><strong>传递配置</strong>：通过 <code>options</code> 接收参数（如替换的字符串）。</li><li><strong>链式协作</strong>：结合其他 Loader（如 <code>babel-loader</code> 处理 ES6）。</li></ul><h4 id="_4-实际开发中的-loader-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-实际开发中的-loader-应用场景"><span><strong>4. 实际开发中的 Loader 应用场景</strong></span></a></h4><ul><li><strong>自定义文件处理</strong>： <ul><li>将 Markdown 转换为 React 组件。</li><li>国际化：自动替换代码中的文本为多语言版本。</li></ul></li><li><strong>代码预处理</strong>： <ul><li>注入环境变量（如 <code>process.env.NODE_ENV</code>）。</li><li>静态分析：检查代码规范或安全漏洞。</li></ul></li></ul><h4 id="_5、工具库函数" tabindex="-1"><a class="header-anchor" href="#_5、工具库函数"><span><strong>5、工具库函数</strong></span></a></h4><p>在编写自定义的 Webpack Loader 时，以下工具库常被使用：</p><ol><li><p><strong><code>loader-utils</code>：</strong></p><p>此工具库提供了多种实用函数，帮助开发者简化 Loader 的编写过程。其中，<code>getOptions</code> 方法用于获取传递给 Loader 的选项：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">getOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;loader-utils&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 使用 options 进行处理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p></p><p>此外，<code>interpolateName</code> 方法可根据文件内容和模板生成文件名，常用于处理文件加载等场景。</p><ol start="2"><li><p><strong><code>schema-utils</code>：</strong></p><p>用于对 Loader 配置项进行验证。通过定义 JSON Schema，确保传入的选项符合预期，从而提高 Loader 的健壮性：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">getOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;loader-utils&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> validateOptions</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;schema-utils&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> schema</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;object&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  properties</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      type</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;string&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  required</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> options</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  validateOptions</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">schema</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">options</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Example Loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 使用经过验证的 options 进行处理</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上述方式，<code>schema-utils</code> 确保了传递给 Loader 的选项符合预期的格式和类型。<br> 这些工具库的使用，可以有效简化 Loader 的开发过程，并提高其可靠性和可维护性。</p></li></ol><hr><h3 id="二、如何编写一个-plugin" tabindex="-1"><a class="header-anchor" href="#二、如何编写一个-plugin"><span><strong>二、如何编写一个 Plugin</strong></span></a></h3><h4 id="_1-plugin-的核心特点" tabindex="-1"><a class="header-anchor" href="#_1-plugin-的核心特点"><span><strong>1. Plugin 的核心特点</strong></span></a></h4><ul><li><strong>基于事件钩子</strong>：通过 Webpack 的<a href="https://webpack.js.org/api/compiler-hooks/" target="_blank" rel="noopener noreferrer">生命周期钩子</a>（如 <code>emit</code>、<code>compile</code>）干预构建流程。</li><li><strong>面向对象设计</strong>：需定义 <code>apply</code> 方法，接收 <code>compiler</code> 对象。</li><li><strong>操作编译结果</strong>：可直接修改输出的资源文件（如 JS、CSS）。</li></ul><h4 id="_2-实现一个简单-plugin-示例" tabindex="-1"><a class="header-anchor" href="#_2-实现一个简单-plugin-示例"><span><strong>2. 实现一个简单 Plugin（示例）</strong></span></a></h4><p><strong>场景</strong>：生成一个版本号文件，记录每次构建的版本和时间。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> VersionFilePlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  apply</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">compiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    compiler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">hooks</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;VersionFilePlugin&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">compilation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> version</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toISOString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">      compilation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">assets</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;version.txt&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        source</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`Build Version: </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">\`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        size</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">length</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      };</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 配置使用</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  plugins</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> VersionFilePlugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>效果</strong>：构建后会在输出目录生成 <code>version.txt</code>，内容为构建时间。</p><h4 id="_3-高级-plugin-技巧" tabindex="-1"><a class="header-anchor" href="#_3-高级-plugin-技巧"><span><strong>3. 高级 Plugin 技巧</strong></span></a></h4><ul><li><strong>多钩子协作</strong>：监听多个钩子（如 <code>compile</code> 阶段读取配置，<code>emit</code> 阶段生成文件）。</li><li><strong>修改模块</strong>：通过 <code>compilation</code> 对象遍历模块依赖图。</li><li><strong>交互外部系统</strong>：在构建完成后上传文件到 CDN（结合 <code>done</code> 钩子）。</li></ul><h4 id="_4-实际开发中的-plugin-应用场景" tabindex="-1"><a class="header-anchor" href="#_4-实际开发中的-plugin-应用场景"><span><strong>4. 实际开发中的 Plugin 应用场景</strong></span></a></h4><ul><li><strong>优化构建产物</strong>： <ul><li>自动压缩图片（如 <code>image-webpack-loader</code> 的底层逻辑）。</li><li>删除未使用的 CSS（如 <code>PurgeCSSPlugin</code>）。</li></ul></li><li><strong>自动化流程</strong>： <ul><li>生成雪碧图并替换 CSS 中的图片引用。</li><li>构建完成后发送通知到钉钉/企业微信。</li></ul></li><li><strong>增强功能</strong>： <ul><li>自动生成路由配置（如基于文件目录结构）。</li><li>注入全局错误监控代码。</li></ul></li></ul><hr><h3 id="三、面试回答模板" tabindex="-1"><a class="header-anchor" href="#三、面试回答模板"><span><strong>三、面试回答模板</strong></span></a></h3><p>「Loader 和 Plugin 的实现方式不同，但都是扩展 Webpack 的核心手段：</p><ol><li><p><strong>Loader 实现</strong>：</p><ul><li><strong>功能</strong>：本质是一个函数，接收文件内容，返回处理后的内容。</li><li><strong>场景</strong>：适合处理文件内容转换（如编译 SCSS、国际化替换）。</li><li><strong>示例</strong>：我曾实现一个 Loader，自动将设计稿中的 <code>px</code> 转换为 <code>rem</code>。</li></ul></li><li><p><strong>Plugin 实现</strong>：</p><ul><li><strong>功能</strong>：是一个类，通过监听 Webpack 生命周期钩子，操作编译对象或产物。</li><li><strong>场景</strong>：适合全局构建任务（如生成版本文件、代码分包优化）。</li><li><strong>示例</strong>：我写过一个 Plugin，在构建完成后自动将静态资源上传到 CDN。</li></ul></li></ol><p>实际开发中，Loader 解决的是“单个文件的加工问题”，Plugin 解决的是“工程化流程的自动化问题”。两者的协作使得 Webpack 成为一个高度灵活的前端构建工具。」</p><hr><h3 id="四、结合项目经验-加分项" tabindex="-1"><a class="header-anchor" href="#四、结合项目经验-加分项"><span><strong>四、结合项目经验（加分项）</strong></span></a></h3><p>「在之前的项目中，我们遇到需要将 SVG 图标自动转换为 React 组件的需求。</p><ul><li><strong>Loader 实现</strong>：编写一个 <code>svg-to-react-loader</code>，将 SVG 文件内容转换为 JSX 字符串。</li><li><strong>Plugin 协作</strong>：通过 Plugin 收集所有 SVG 的路径，生成一个全局的图标映射表，供组件按需引用。<br> 这一组合减少了手动维护成本，提升了开发效率。」</li></ul><hr><h2 id="六、webpack-loader-执行顺序" tabindex="-1"><a class="header-anchor" href="#六、webpack-loader-执行顺序"><span><strong>六、webpack loader 执行顺序</strong></span></a></h2><p>通过这样的回答，既能体现对 Webpack 扩展机制的理解，又能通过实际案例展示工程化能力，让面试官感受到你的实战经验。</p><p>在 Webpack 的 Loader 机制中，**Normal（常规阶段）**和 **Pitch（前置阶段）**是 Loader 执行流程的两个关键阶段。以下是面向面试官的清晰解释框架：</p><hr><h3 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念"><span>核心概念</span></a></h3><ol><li><p><strong>执行顺序不同</strong>：</p><ul><li><strong>Pitch 阶段</strong>：从左到右执行 Loader 的 <code>pitch</code> 方法（若有定义）</li><li><strong>Normal 阶段</strong>：从右到左执行 Loader 的常规函数（默认阶段）</li></ul></li><li><p><strong>类比管道模型</strong>：</p><ul><li>想象一列垂直排列的 Loader（如 <code>[A, B, C]</code>）</li><li>Pitch 阶段：<strong>自上而下</strong>执行（<code>A.pitch → B.pitch → C.pitch</code>）</li><li>Normal 阶段：<strong>自下而上</strong>执行（<code>C → B → A</code>）</li></ul></li></ol><hr><h3 id="关键规则-熔断机制" tabindex="-1"><a class="header-anchor" href="#关键规则-熔断机制"><span>关键规则：熔断机制</span></a></h3><ul><li><strong>Pitch 阶段的返回值</strong>会中断后续流程： <ul><li>若某个 Loader 的 <code>pitch</code> 方法返回非 <code>undefined</code> 值，则会： <ol><li><strong>跳过</strong>后续所有 Loader 的 Pitch 阶段</li><li><strong>跳过</strong>当前 Loader 的 Normal 阶段</li><li><strong>直接回溯</strong>执行已执行过 Pitch 的 Loader 的 Normal 阶段</li></ol></li></ul></li></ul><hr><h3 id="执行流程图解" tabindex="-1"><a class="header-anchor" href="#执行流程图解"><span>执行流程图解</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>          Loader 链: [loaderA, loaderB, loaderC]</span></span>
<span class="line"><span>          Resource: file.js</span></span>
<span class="line"><span>          </span></span>
<span class="line"><span>执行流程：</span></span>
<span class="line"><span>          ↗ loaderA.pitch()</span></span>
<span class="line"><span>           ↘ loaderB.pitch()</span></span>
<span class="line"><span>            ↘ loaderC.pitch()</span></span>
<span class="line"><span>              ↘ Read File</span></span>
<span class="line"><span>            ↗ loaderC()</span></span>
<span class="line"><span>           ↗ loaderB()</span></span>
<span class="line"><span>          ↗ loaderA()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// loaderA.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Normal A&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pitch</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Pitch A&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// loaderB.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Normal B&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pitch</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Pitch B&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // return &quot;hello&quot;; // 若取消注释，会触发熔断</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// loaderC.js</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Normal C&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> source</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pitch</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Pitch C&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="正常输出" tabindex="-1"><a class="header-anchor" href="#正常输出"><span>正常输出：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Pitch A → Pitch B → Pitch C → Read File → Normal C → Normal B → Normal A</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="若-loaderb-pitch-返回非-undefined" tabindex="-1"><a class="header-anchor" href="#若-loaderb-pitch-返回非-undefined"><span>若 loaderB.pitch 返回非 undefined：</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Pitch A → Pitch B → Normal A</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h3 id="实际应用场景" tabindex="-1"><a class="header-anchor" href="#实际应用场景"><span>实际应用场景</span></a></h3><ol><li><p><strong>提前处理请求</strong>：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// style-loader 的 pitch 阶段拦截 CSS 请求</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pitch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">remainingRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> \`</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    var style = document.createElement(&#39;style&#39;);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    style.innerHTML = require(</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">\${</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stringifyRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#CA1243;--shiki-dark:#98C379;"> &quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">!!</span><span style="--shiki-light:#CA1243;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> remainingRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    document.head.appendChild(style);</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  \`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>性能优化</strong>：</p><ul><li>在 Pitch 阶段提前校验或缓存资源</li></ul></li><li><p><strong>流程控制</strong>：</p><ul><li>通过返回值直接短路后续 Loader（如缓存命中时）</li></ul></li></ol><hr><h3 id="面试回答要点" tabindex="-1"><a class="header-anchor" href="#面试回答要点"><span>面试回答要点</span></a></h3><ol><li><strong>明确阶段顺序</strong>：&quot;Loader 执行分为两个方向相反的阶段&quot;</li><li><strong>强调熔断机制</strong>：&quot;Pitch 阶段的返回值可以中断后续流程&quot;</li><li><strong>举例实际应用</strong>：&quot;像 <code>style-loader</code> 通过 Pitch 阶段注入运行时代码&quot;</li><li><strong>补充原理认知</strong>：&quot;Webpack 底层通过 <code>LoaderRunner</code> 库控制此流程&quot;</li></ol><p>这种回答既展示了技术深度，又体现了对 Webpack 底层机制的理解，适合中高级前端岗位的面试场景。</p><hr>`,184)]))}const r=i(e,[["render",h]]),d=JSON.parse('{"path":"/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/summary.html","title":"webpack总结","lang":"zh-CN","frontmatter":{"title":"webpack总结","date":"2022-04-19T00:00:00.000Z","tags":["面试题"],"description":"一、关于webpack 构建优化 参考文章 参考 配合webpack 实现路由懒加载, 也可以实现组件级的懒加载 例如 react.lazy 配合 Suspense 实现 splitChunks 可以对js 进行代码分割 提取公共js 详情 mini-css-extract-plugin 实现css 按需加载 cdn 加速加载,对一些通用的第三方包可以...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/zy-vuepress/posts/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/summary.html"}],["meta",{"property":"og:site_name","content":"我的基地"}],["meta",{"property":"og:title","content":"webpack总结"}],["meta",{"property":"og:description","content":"一、关于webpack 构建优化 参考文章 参考 配合webpack 实现路由懒加载, 也可以实现组件级的懒加载 例如 react.lazy 配合 Suspense 实现 splitChunks 可以对js 进行代码分割 提取公共js 详情 mini-css-extract-plugin 实现css 按需加载 cdn 加速加载,对一些通用的第三方包可以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-18T11:30:46.000Z"}],["meta",{"property":"article:tag","content":"面试题"}],["meta",{"property":"article:published_time","content":"2022-04-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-18T11:30:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"webpack总结\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-04-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-18T11:30:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mrs.Zoe\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、关于webpack 构建优化","slug":"一、关于webpack-构建优化","link":"#一、关于webpack-构建优化","children":[]},{"level":2,"title":"二、webpack5","slug":"二、webpack5","link":"#二、webpack5","children":[]},{"level":2,"title":"webpack5说明","slug":"webpack5说明","link":"#webpack5说明","children":[]},{"level":2,"title":"三、 webpack 热更新","slug":"三、-webpack-热更新","link":"#三、-webpack-热更新","children":[{"level":3,"title":"1. 一句话定义","slug":"_1-一句话定义","link":"#_1-一句话定义","children":[]},{"level":3,"title":"2. 核心流程（分步骤解释）","slug":"_2-核心流程-分步骤解释","link":"#_2-核心流程-分步骤解释","children":[]},{"level":3,"title":"3. 关键技术点（加分项）","slug":"_3-关键技术点-加分项","link":"#_3-关键技术点-加分项","children":[]},{"level":3,"title":"4. 简明总结（给面试官一个记忆点）","slug":"_4-简明总结-给面试官一个记忆点","link":"#_4-简明总结-给面试官一个记忆点","children":[]},{"level":3,"title":"5. 常见追问与应对","slug":"_5-常见追问与应对","link":"#_5-常见追问与应对","children":[]},{"level":3,"title":"回答技巧","slug":"回答技巧","link":"#回答技巧","children":[]},{"level":3,"title":"1. 一句话定位","slug":"_1-一句话定位","link":"#_1-一句话定位","children":[]},{"level":3,"title":"2. 核心协作流程","slug":"_2-核心协作流程","link":"#_2-核心协作流程","children":[]},{"level":3,"title":"3. 关键技术细节（加分项）","slug":"_3-关键技术细节-加分项","link":"#_3-关键技术细节-加分项","children":[]},{"level":3,"title":"4. 配置与实战示例","slug":"_4-配置与实战示例","link":"#_4-配置与实战示例","children":[]},{"level":3,"title":"5. 对比旧方案（react-hot-loader）","slug":"_5-对比旧方案-react-hot-loader","link":"#_5-对比旧方案-react-hot-loader","children":[]},{"level":3,"title":"6. 面试回答模板","slug":"_6-面试回答模板","link":"#_6-面试回答模板","children":[]}]},{"level":2,"title":"四、 Loader 和 Plugin 的区别","slug":"四、-loader-和-plugin-的区别","link":"#四、-loader-和-plugin-的区别","children":[{"level":3,"title":"1. 一句话定义（直接点明核心）","slug":"_1-一句话定义-直接点明核心","link":"#_1-一句话定义-直接点明核心","children":[]},{"level":3,"title":"2. 核心区别（分点对比）","slug":"_2-核心区别-分点对比","link":"#_2-核心区别-分点对比","children":[]},{"level":3,"title":"3. 技术细节（结合 Webpack 运行机制）","slug":"_3-技术细节-结合-webpack-运行机制","link":"#_3-技术细节-结合-webpack-运行机制","children":[]},{"level":3,"title":"4. 通俗类比（帮助面试官快速理解）","slug":"_4-通俗类比-帮助面试官快速理解","link":"#_4-通俗类比-帮助面试官快速理解","children":[]},{"level":3,"title":"5. 常见误区澄清（避免踩坑）","slug":"_5-常见误区澄清-避免踩坑","link":"#_5-常见误区澄清-避免踩坑","children":[]},{"level":3,"title":"6. 结合项目经验（增强说服力）","slug":"_6-结合项目经验-增强说服力","link":"#_6-结合项目经验-增强说服力","children":[]},{"level":3,"title":"7. 面试回答模板（简洁版）","slug":"_7-面试回答模板-简洁版","link":"#_7-面试回答模板-简洁版","children":[]}]},{"level":2,"title":"五、如何写Loader 和 Plugin","slug":"五、如何写loader-和-plugin","link":"#五、如何写loader-和-plugin","children":[{"level":3,"title":"一、如何编写一个 Loader","slug":"一、如何编写一个-loader","link":"#一、如何编写一个-loader","children":[]},{"level":3,"title":"二、如何编写一个 Plugin","slug":"二、如何编写一个-plugin","link":"#二、如何编写一个-plugin","children":[]},{"level":3,"title":"三、面试回答模板","slug":"三、面试回答模板","link":"#三、面试回答模板","children":[]},{"level":3,"title":"四、结合项目经验（加分项）","slug":"四、结合项目经验-加分项","link":"#四、结合项目经验-加分项","children":[]}]},{"level":2,"title":"六、webpack loader 执行顺序","slug":"六、webpack-loader-执行顺序","link":"#六、webpack-loader-执行顺序","children":[{"level":3,"title":"核心概念","slug":"核心概念","link":"#核心概念","children":[]},{"level":3,"title":"关键规则：熔断机制","slug":"关键规则-熔断机制","link":"#关键规则-熔断机制","children":[]},{"level":3,"title":"执行流程图解","slug":"执行流程图解","link":"#执行流程图解","children":[]},{"level":3,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[]},{"level":3,"title":"实际应用场景","slug":"实际应用场景","link":"#实际应用场景","children":[]},{"level":3,"title":"面试回答要点","slug":"面试回答要点","link":"#面试回答要点","children":[]}]}],"git":{"createdTime":1742297446000,"updatedTime":1742297446000,"contributors":[{"name":"zy","username":"zy","email":"891374900@qq.com","commits":1,"url":"https://github.com/zy"}]},"readingTime":{"minutes":21.24,"words":6372},"filePathRelative":"posts/前端工程化/summary.md","localizedDate":"2022年4月19日","excerpt":"<h2>一、关于webpack 构建优化</h2>\\n<p><strong><a href=\\"https://juejin.cn/post/7233298696292040741#heading-3\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考文章</a></strong></p>\\n<p><strong><a href=\\"https://juejin.cn/post/7221516772162289723#heading-15\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考 </a></strong></p>","autoDesc":true}');export{r as comp,d as data};
